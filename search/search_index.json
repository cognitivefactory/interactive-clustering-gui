{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interactive Clustering GUI","text":"<p>A web application designed for NLP data annotation using Interactive Clustering methodology.</p>"},{"location":"#quick-description","title":"Quick description","text":"<p>Interactive clustering is a method intended to assist in the design of a training data set.</p> <p>This iterative process begins with an unlabeled dataset, and it uses a sequence of two substeps :</p> <ol> <li>the user defines constraints on data sampled by the computer ;</li> <li>the computer performs data partitioning using a constrained clustering algorithm.</li> </ol> <p>Thus, at each step of the process :</p> <ul> <li>the user corrects the clustering of the previous steps using constraints, and</li> <li>the computer offers a corrected and more relevant data partitioning for the next step.</li> </ul> <p> Simplified diagram of how Interactive Clustering works. </p> <p> Example of iterations of Interactive Clustering. </p> <p>This web application implements this annotation methodology with several features:</p> <ul> <li>data preprocessing and vectorization in order to reduce noise in data;</li> <li>constrainted clustering in order to automatically partition the data;</li> <li>constraints sampling in order to select the most relevant data to annotate;</li> <li>binary constraints annotation in order to correct clustering relevance;</li> <li>annotation review and conflicts analysis in order to improve constraints consistency.</li> </ul> <p> Welcome page of Interactive Clustering Web Application. </p> <p>For more details, read the Documentation and the articles in the References section.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Main documentation</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Interactive Clustering GUI requires Python 3.8 or above.</p> <p>To install with <code>pip</code>:</p> <pre><code># install package\npython3 -m pip install cognitivefactory-interactive-clustering-gui\n\n# install spacy language model dependencies (the one you want, with version \"3.4.x\")\npython3 -m spacy download fr_core_news_md-3.4.0 --direct\n</code></pre> <p>To install with <code>pipx</code>:</p> <pre><code># install pipx\npython3 -m pip install --user pipx\n\n# install package\npipx install --python python3 cognitivefactory-interactive-clustering-gui\n\n# install spacy language model dependencies (the one you want, with version \"3.4.x\")\npython3 -m spacy download fr_core_news_md-3.4.0 --direct\n</code></pre>"},{"location":"#run","title":"Run","text":"<p>To display the help message:</p> <pre><code>cognitivefactory-interactive-clustering-gui --help\n</code></pre> <p>To launch the web application:</p> <pre><code>cognitivefactory-interactive-clustering-gui  # launch on 127.0.0.1:8080\n</code></pre> <p>Then, go to one of the following pages in your browser:</p> <ul> <li>Welcome page (web application home): http://localhost:8080</li> <li>Swagger (interactive documentation): http://localhost:8080/docs</li> </ul>"},{"location":"#development","title":"Development","text":"<p>To work on this project or contribute to it, please read:</p> <ul> <li>the Copier PDM template documentation ;</li> <li>the Contributing page for environment setup and development help ;</li> <li>the Code of Conduct page for contribution rules.</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li> <p>Interactive Clustering:</p> <ul> <li>PhD report: <code>Schild, E. (2024, in press). De l'Importance de Valoriser l'Expertise Humaine dans l'Annotation : Application \u00e0 la Mod\u00e9lisation de Textes en Intentions \u00e0 l'aide d'un Clustering Interactif. Universit\u00e9 de Lorraine.</code> ;</li> <li>First presentation: <code>Schild, E., Durantin, G., Lamirel, J.C., &amp; Miconi, F. (2021). Conception it\u00e9rative et semi-supervis\u00e9e d'assistants conversationnels par regroupement interactif des questions. In EGC 2021 - 21\u00e8mes Journ\u00e9es Francophones Extraction et Gestion des Connaissances. Edition RNTI. &lt;hal-03133007&gt;.</code></li> <li>Theoretical study: <code>Schild, E., Durantin, G., Lamirel, J., &amp; Miconi, F. (2022). Iterative and Semi-Supervised Design of Chatbots Using Interactive Clustering. International Journal of Data Warehousing and Mining (IJDWM), 18(2), 1-19. http://doi.org/10.4018/IJDWM.298007. &lt;hal-03648041&gt;.</code></li> <li>Methodological discussion: <code>Schild, E., Durantin, G., &amp; Lamirel, J.C. (2021). Concevoir un assistant conversationnel de mani\u00e8re it\u00e9rative et semi-supervis\u00e9e avec le clustering interactif. In Atelier - Fouille de Textes - Text Mine 2021 - En conjonction avec EGC 2021. &lt;hal-03133060&gt;.</code></li> <li>Implementation: <code>Schild, E. (2021). cognitivefactory/interactive-clustering. Zenodo. https://doi.org/10.5281/zenodo.4775251.</code></li> </ul> </li> <li> <p>Web application:</p> <ul> <li>FastAPI: <code>https://fastapi.tiangolo.com/</code></li> </ul> </li> </ul>"},{"location":"#other-links","title":"Other links","text":"<ul> <li>Several comparative studies of Interactive Clustering methodology on NLP datasets: <code>Schild, E. (2021). cognitivefactory/interactive-clustering-comparative-study. Zenodo. https://doi.org/10.5281/zenodo.5648255</code>. (GitHub: cognitivefactory/interactive-clustering-comparative-study).</li> </ul> <p> Organizational diagram of the different Comparative Studies of Interactive Clustering. </p>"},{"location":"#how-to-cite","title":"How to cite","text":"<p><code>Schild, E. (2021). cognitivefactory/interactive-clustering-gui. Zenodo. https://doi.org/10.5281/zenodo.4775270.</code></p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#041-2023-04-27","title":"0.4.1 - 2023-04-27","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>force HTML escape when display texts (26d3f23 by SCHILD Erwan).</li> </ul>"},{"location":"changelog/#040-2022-09-01","title":"0.4.0 - 2022-09-01","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>correct expected status for constraints approval in js (8c8ed8d by SCHILD Erwan).</li> </ul>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>update flake8 (incompatibilities) (3b9461d by SCHILD Erwan).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>add confirmation when modify annotation in html/js (9c2dbdb by SCHILD Erwan).</li> <li>change constraints summary default order in js (a0b94b0 by SCHILD Erwan).</li> <li>move welcome page to '/' (ae94345 by SCHILD Erwan).</li> <li>pyproject.toml (a8b0323 by SCHILD Erwan).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add direct link to constraints to annotate, with some ux refactor (9522360 by SCHILD Erwan).</li> </ul>"},{"location":"changelog/#030-2022-08-26","title":"0.3.0 - 2022-08-26","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>config for command line input (36351ab by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>remove test for cli (3dc8291 by Erwan SCHILD).</li> <li>update config for command line input (6a5c573 by Erwan SCHILD).</li> <li>make format (3e16a95 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add a command line to run the app (7957239 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#021-2022-08-25","title":"0.2.1 - 2022-08-25","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>remove direct dependency to spacy-models/fr-core-news-md (f02894d by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#020-2022-08-25","title":"0.2.0 - 2022-08-25","text":"<p>Compare with 0.1.3</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>handle timezone and pickle5 (abad506 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#build_2","title":"Build","text":"<ul> <li>add .gitignore (14addf6 by Erwan SCHILD).</li> <li>update pyproject.toml with url dependencies (e2c147a by Erwan SCHILD).</li> <li>update copier-pdm template to 0.9.10 (fa67838 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>remove MVP app (6173cde by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>implementation of web application (background tasks, constraints annotation, conflicts resolution) (c51c2bd by Erwan SCHILD).</li> <li>MVP sans parametres (c39591e by Cl\u00e9mentine Misiak).</li> </ul>"},{"location":"changelog/#013-2021-09-01","title":"0.1.3 - 2021-09-01","text":"<p>Compare with 0.1.2</p>"},{"location":"changelog/#build_3","title":"Build","text":"<ul> <li>update project from poetry to pdm (845aa72 by Erwan SCHILD).</li> <li>update .gitignore with migration from poetry to pdm (3b5999b by Erwan SCHILD).</li> <li>prepare migration from poetry to pdm (371cb99 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>add py.typed file (7017f8f by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#012-2021-05-19","title":"0.1.2 - 2021-05-19","text":"<p>Compare with 0.1.1</p>"},{"location":"changelog/#build_4","title":"Build","text":"<ul> <li>update pyproject.toml with dependencies (46391c7 by Erwan SCHILD).</li> </ul>"},{"location":"changelog/#011-2021-05-18","title":"0.1.1 - 2021-05-18","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#010-2021-05-18","title":"0.1.0 - 2021-05-18","text":"<p>Compare with first commit</p>"},{"location":"changelog/#build_5","title":"Build","text":"<ul> <li>correct install sources (4c3d590 by Erwan SCHILD).</li> <li>init package (83c57bb by Erwan SCHILD).</li> <li>initialize repository (e6a9c56 by Erwan SCHILD).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li> <p>Using welcoming and inclusive language</p> </li> <li> <p>Being respectful of differing viewpoints and experiences</p> </li> <li> <p>Gracefully accepting constructive criticism</p> </li> <li> <p>Focusing on what is best for the community</p> </li> <li> <p>Showing empathy towards other community members</p> </li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li> <p>The use of sexualized language or imagery and unwelcome sexual attention or advances</p> </li> <li> <p>Trolling, insulting/derogatory comments, and personal or political attacks</p> </li> <li> <p>Public or private harassment</p> </li> <li> <p>Publishing others' private information, such as a physical or electronic address, without explicit permission</p> </li> <li> <p>Other conduct which could reasonably be considered inappropriate in a professional setting</p> </li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at erwan.schild@e-i.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier! Follow the instructions below.</p> <p>Note</p> <p>We STRONGLY recommend using a Linux distribution for Python development (Windows sometimes leads to obscure compatibility errors...)</p> <ol> <li> <p>Install <code>Git</code> to version and track our software changes.</p> <ul> <li> <p>On Windows, use the official installer: <code>Git-for-Windows</code>.</p> </li> <li> <p>On Linux, simply use your package manager.</p> </li> </ul> <p>Note</p> <p><code>Git-for-Windows</code> doesn't provide the command <code>make</code>. In following step, use <code>pdm</code> instead.</p> </li> <li> <p>Install <code>Python</code> as programming language for this projet.</p> <ul> <li> <p>On Windows, use the official installer: Python Releases for Windows.</p> </li> <li> <p>On Linux, simply use your package manager.</p> </li> </ul> <p>Note</p> <p>You can also use use <code>pyenv</code>.</p> <pre><code># install pyenv\ngit clone https://github.com/pyenv/pyenv ~/.pyenv\n\n# setup pyenv (you should also put these three lines in .bashrc or similar)\nexport PATH=\"${HOME}/.pyenv/bin:${PATH}\"\nexport PYENV_ROOT=\"${HOME}/.pyenv\"\neval \"$(pyenv init -)\"\n\n# install Python 3.8\npyenv install 3.8\n\n# make it available globally\npyenv global system 3.8\n</code></pre> </li> <li> <p>Fork and clone the repository:</p> <pre><code>git clone https://github.com/cognitivefactory/interactive-clustering-gui/\ncd interactive-clustering-gui\n</code></pre> </li> <li> <p>Install the dependencies of the projet with:</p> <pre><code>cd interactive-clustering\nmake setup # on Linux\npdm install # on Windows\n</code></pre> <p>Note</p> <p>If it fails for some reason (especially on Windows), you'll need to install <code>pipx</code> and <code>pdm</code> manually.</p> <p>You can install them with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> </li> </ol> <p>Your project is now ready and dependencies are installed.</p>"},{"location":"contributing/#available-template-tasks","title":"Available template tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. To run a task, use <code>make TASK</code> on Linux and <code>pdm run duty TASK</code> on Windows.</p> <p>To show the available template task:</p> <pre><code>make help # on Linux\npdm run duty --list # on Windows\n</code></pre> <p>The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>pdm run duty TASK</code></li> </ol> <p>The Makefile detects if a virtual environment is activated, so <code>make</code>/<code>pdm</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development-journey","title":"Development journey","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>If you updated the documentation or the project dependencies:</p> <ol> <li>run <code>make docs-regen</code></li> <li>run <code>make docs-serve</code>, go to http://localhost:8000 and check that everything looks good</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commits messages must follow the Angular style:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes which are not features nor bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end:</p> <pre><code>Body.\n\nReferences: #10, #11.\nFixes #15.\n</code></pre>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build <code>cognitivefactory-interactive-clustering-gui</code>. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations <code>&lt;4.0.0,&gt;=3.7.1</code> <code>3.7.1</code> MIT <code>blis</code> The Blis BLAS-like linear algebra library, as a self-contained C-extension. <code>&lt;0.8.0,&gt;=0.7.8</code> <code>0.7.11</code> BSD <code>catalogue</code> Super lightweight function registries for your library <code>&lt;2.1.0,&gt;=2.0.6</code> <code>2.0.10</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&lt;9.0.0,&gt;=7.1.1</code> <code>8.1.7</code> BSD-3-Clause <code>cognitivefactory-interactive-clustering</code> Python package used to apply NLP interactive clustering methods. <code>&gt;=1.0.0</code> <code>1.0.0</code> CECILL-C <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.3.4; sys_platform == \"win32\"</code> <code>0.4.6</code> BSD License <code>confection</code> The sweetest config system for Python <code>&lt;1.0.0,&gt;=0.0.1</code> <code>0.1.3</code> MIT <code>cymem</code> Manage calls to calloc/free through Cython <code>&lt;2.1.0,&gt;=2.0.2</code> <code>2.0.8</code> MIT <code>et-xmlfile</code> An implementation of lxml.xmlfile for the standard library <code>1.1.0</code> MIT <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>; python_version &lt; \"3.11\"</code> <code>1.1.3</code> MIT License <code>fastapi</code> FastAPI framework, high performance, easy to learn, fast to code, ready for production <code>&gt;=0.65.2</code> <code>0.103.2</code> MIT License <code>filelock</code> A platform independent file lock. <code>&gt;=3.0.12</code> <code>3.13.1</code> The Unlicense (Unlicense) <code>h11</code> A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 <code>&gt;=0.8</code> <code>0.14.0</code> MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.8</code> <code>3.4</code> BSD License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=3.0.1</code> <code>3.1.2</code> BSD-3-Clause <code>joblib</code> Lightweight pipelining with Python functions <code>&gt;=1.1.1</code> <code>1.3.2</code> BSD 3-Clause <code>langcodes</code> Tools for labeling human languages with IETF language tags <code>&lt;4.0.0,&gt;=3.2.0</code> <code>3.3.0</code> MIT <code>loguru</code> Python logging made (stupidly) simple <code>&gt;=0.5.3</code> <code>0.7.2</code> MIT license <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>murmurhash</code> Cython bindings for MurmurHash <code>&lt;1.1.0,&gt;=0.28.0</code> <code>1.0.10</code> MIT <code>networkx</code> Python package for creating and manipulating graphs and networks <code>&gt;=2.6</code> <code>3.1</code> BSD License <code>numpy</code> Fundamental package for array computing in Python <code>&gt;=1.23.5</code> <code>1.24.4</code> BSD-3-Clause <code>openpyxl</code> A Python library to read/write Excel 2010 xlsx/xlsm files <code>&gt;=3.0.7</code> <code>3.1.2</code> MIT <code>packaging</code> Core utilities for Python packages <code>&gt;=20.0</code> <code>23.2</code> BSD License <code>pandas</code> Powerful data structures for data analysis, time series, and statistics <code>&gt;=1.1.4</code> <code>2.0.3</code> BSD License <code>pathy</code> pathlib.Path subclasses for local and cloud bucket storage <code>&gt;=0.3.5</code> <code>0.10.3</code> Apache 2.0 <code>preshed</code> Cython hash table that trusts the keys are pre-hashed <code>&lt;3.1.0,&gt;=3.0.2</code> <code>3.0.9</code> MIT <code>prometheus-client</code> Python client for the Prometheus monitoring system. <code>&lt;1.0.0,&gt;=0.8.0</code> <code>0.18.0</code> Apache Software License 2.0 <code>prometheus-fastapi-instrumentator</code> Instrument your FastAPI with Prometheus metrics. <code>&gt;=5.5.1</code> <code>6.1.0</code> ISC <code>pydantic</code> Data validation and settings management using python type hints <code>!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,&lt;3.0.0,&gt;=1.7.4</code> <code>1.10.13</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.2</code> <code>2.8.2</code> Dual License <code>python-multipart</code> A streaming multipart parser for Python <code>&gt;=0.0.5</code> <code>0.0.6</code> Apache Software License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2020.1</code> <code>2023.3.post1</code> MIT <code>requests</code> Python HTTP for Humans. <code>&lt;3.0.0,&gt;=2.13.0</code> <code>2.31.0</code> Apache 2.0 <code>scikit-learn</code> A set of python modules for machine learning and data mining <code>&gt;=0.24.1</code> <code>1.3.2</code> new BSD <code>scipy</code> Fundamental algorithms for scientific computing in Python <code>&gt;=1.7.3</code> <code>1.9.3</code> BSD License <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=65.5.1</code> <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smart-open</code> Utils for streaming large files (S3, HDFS, GCS, Azure Blob Storage, gzip, bz2...) <code>&lt;7.0.0,&gt;=5.2.1</code> <code>6.4.0</code> MIT <code>sniffio</code> Sniff out which async library your code is running under <code>&gt;=1.1</code> <code>1.3.0</code> MIT OR Apache-2.0 <code>spacy</code> Industrial-strength Natural Language Processing (NLP) in Python <code>&lt;3.5,&gt;=3.4</code> <code>3.4.4</code> MIT <code>spacy-legacy</code> Legacy registered functions for spaCy backwards compatibility <code>&lt;3.1.0,&gt;=3.0.10</code> <code>3.0.12</code> MIT <code>spacy-loggers</code> Logging utilities for SpaCy <code>&lt;2.0.0,&gt;=1.0.0</code> <code>1.0.5</code> MIT <code>srsly</code> Modern high-performance serialization utilities for Python <code>&lt;3.0.0,&gt;=2.4.3</code> <code>2.4.8</code> MIT <code>starlette</code> The little ASGI library that shines. <code>&lt;0.28.0,&gt;=0.27.0</code> <code>0.27.0</code> BSD License <code>thinc</code> A refreshing functional take on deep learning, compatible with your favorite libraries <code>&lt;8.2.0,&gt;=8.1.0</code> <code>8.1.12</code> MIT <code>threadpoolctl</code> threadpoolctl <code>&gt;=2.0.0</code> <code>3.2.0</code> BSD-3-Clause <code>tqdm</code> Fast, Extensible Progress Meter <code>&lt;5.0.0,&gt;=4.38.0</code> <code>4.66.1</code> MPL-2.0 AND MIT <code>typer</code> Typer, build great CLIs. Easy to code. Based on Python type hints. <code>&lt;0.8.0,&gt;=0.3.0</code> <code>0.7.0</code> MIT License <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=4.5.0</code> <code>4.5.0</code> Python Software Foundation License <code>tzdata</code> Provider of IANA time zone data <code>&gt;=2022.1</code> <code>2023.3</code> Apache-2.0 <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>1.26.18</code> MIT <code>uvicorn</code> The lightning-fast ASGI server. <code>&gt;=0.12.2</code> <code>0.24.0.post1</code> BSD License <code>wasabi</code> A lightweight console printing and formatting toolkit <code>&lt;1.1.0,&gt;=0.9.1</code> <code>0.10.1</code> MIT <code>win32-setctime</code> A small Python utility to set file creation time on Windows <code>&gt;=1.0.0; sys_platform == \"win32\"</code> <code>1.1.0</code> MIT license <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=3.5.0</code> <code>3.17.0</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>anyio</code> High level compatibility layer for multiple asynchronous event loop implementations <code>3.7.1</code> MIT <code>astor</code> Read/rewrite/write Python ASTs <code>&gt;=0.8</code> <code>0.8.1</code> BSD-3-Clause <code>attrs</code> Classes Without Boilerplate <code>&gt;=19.2.0</code> <code>23.1.0</code> MIT License <code>autoflake</code> Removes unused imports and unused variables <code>&gt;=1.4</code> <code>1.7.8</code> MIT <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.13.1</code> BSD-3-Clause <code>bandit</code> Security oriented static analyser for python code. <code>&gt;=1.7.3</code> <code>1.7.5</code> Apache-2.0 license <code>black</code> The uncompromising code formatter. <code>&gt;=21.10b0</code> <code>23.11.0</code> MIT <code>blis</code> The Blis BLAS-like linear algebra library, as a self-contained C-extension. <code>&lt;0.8.0,&gt;=0.7.8</code> <code>0.7.11</code> BSD <code>catalogue</code> Super lightweight function registries for your library <code>&lt;2.1.0,&gt;=2.0.6</code> <code>2.0.10</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2022.12.7</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>confection</code> The sweetest config system for Python <code>&lt;1.0.0,&gt;=0.0.1</code> <code>0.1.3</code> MIT <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.2</code> Apache-2.0 <code>cymem</code> Manage calls to calloc/free through Cython <code>&lt;2.1.0,&gt;=2.0.2</code> <code>2.0.8</code> MIT <code>darglint</code> A utility for ensuring Google-style docstrings stay up to date with the source code. <code>&gt;=1.8</code> <code>1.8.1</code> MIT <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.7</code> <code>1.1.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0; python_version &lt; \"3.11\"</code> <code>1.1.3</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>!=1.0.0,&gt;=0.11</code> <code>1.0.2</code> ISC <code>flake8</code> the modular source code checker: pep8 pyflakes and co <code>&gt;=4</code> <code>5.0.4</code> MIT <code>flake8-bandit</code> Automated security testing with bandit and flake8. <code>&gt;=2.1</code> <code>4.1.1</code> MIT <code>flake8-black</code> flake8 plugin to call black as a code style validator <code>&gt;=0.2</code> <code>0.3.6</code> MIT <code>flake8-bugbear</code> A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. <code>&gt;=21.9</code> <code>23.3.12</code> MIT <code>flake8-builtins</code> Check for python builtins being used as variables or parameters <code>&gt;=1.5</code> <code>2.2.0</code> GNU General Public License v2 (GPLv2) <code>flake8-comprehensions</code> A flake8 plugin to help you write better list/set/dict comprehensions. <code>&gt;=3.7</code> <code>3.14.0</code> MIT <code>flake8-docstrings</code> Extension for flake8 which uses pydocstyle to check docstrings <code>&gt;=1.6</code> <code>1.7.0</code> MIT <code>flake8-plugin-utils</code> The package provides base classes and utils for flake8 plugin writing <code>&lt;2.0.0,&gt;=1.3.2</code> <code>1.3.3</code> MIT <code>flake8-polyfill</code> Polyfill package for Flake8 plugins <code>&gt;=1.0.2</code> <code>1.0.2</code> MIT <code>flake8-pytest-style</code> A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. <code>&gt;=1.5</code> <code>1.7.2</code> MIT <code>flake8-string-format</code> string format checker, plugin for flake8 <code>&gt;=0.3</code> <code>0.3.0</code> MIT License <code>flake8-tidy-imports</code> A flake8 plugin that helps you write tidier imports. <code>&gt;=4.5</code> <code>4.10.0</code> MIT <code>flake8-variables-names</code> A flake8 extension that helps to make more readable variables names <code>&gt;=0.0</code> <code>0.0.6</code> MIT <code>fr-core-news-md</code> French pipeline optimized for CPU. Components: tok2vec, morphologizer, parser, senter, ner, attribute_ruler, lemmatizer. <code>@ https://github.com/explosion/spacy-models/releases/download/fr_core_news_md-3.4.0/fr_core_news_md-3.4.0.tar.gz</code> <code>3.4.0</code> LGPL-LR <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=0.4,&lt;1.0</code> <code>0.6.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.30</code> <code>3.1.40</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.37</code> <code>0.38.0</code> ISC <code>h11</code> A pure-Python, bring-your-own-I/O implementation of HTTP/1.1 <code>&lt;0.15,&gt;=0.13</code> <code>0.14.0</code> MIT <code>httpcore</code> A minimal low-level HTTP client. <code>1.0.2</code> BSD License <code>httpx</code> The next generation HTTP client. <code>&gt;=0.16</code> <code>0.25.1</code> BSD License <code>hypothesis</code> A library for property-based testing <code>&gt;=6.8</code> <code>6.89.0</code> MPL-2.0 <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> Apache Software License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>isort</code> A Python utility / library to sort Python imports. <code>&gt;=5.10</code> <code>5.12.0</code> MIT <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>langcodes</code> Tools for labeling human languages with IETF language tags <code>&lt;4.0.0,&gt;=3.2.0</code> <code>3.3.0</code> MIT <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5.1</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.7.0</code> ISC <code>markdown-it-py</code> Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mccabe</code> McCabe checker, plugin for flake8 <code>&lt;0.8.0,&gt;=0.7.0</code> <code>0.7.0</code> Expat license <code>mdurl</code> Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.5.0</code> MIT License <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.4.8</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3</code> MIT License <code>mkdocs-section-index</code> MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.8</code> MIT License <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.19</code> <code>0.24.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.4</code> ISC <code>murmurhash</code> Cython bindings for MurmurHash <code>&lt;1.1.0,&gt;=0.28.0</code> <code>1.0.10</code> MIT <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>1.7.0</code> MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>numpy</code> Fundamental package for array computing in Python <code>&gt;=1.15.0</code> <code>1.24.4</code> BSD-3-Clause <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>pathy</code> pathlib.Path subclasses for local and cloud bucket storage <code>&gt;=0.3.5</code> <code>0.10.3</code> Apache 2.0 <code>pbr</code> Python Build Reasonableness <code>!=2.1.0,&gt;=2.0.0</code> <code>6.0.0</code> Apache Software License <code>pep8-naming</code> Check PEP-8 naming conventions, plugin for flake8 <code>&gt;=0.12</code> <code>0.13.3</code> Expat license <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>4.0.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>preshed</code> Cython hash table that trusts the keys are pre-hashed <code>&lt;3.1.0,&gt;=3.0.2</code> <code>3.0.9</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ? <code>pycodestyle</code> Python style guide checker <code>&lt;2.10.0,&gt;=2.9.0</code> <code>2.9.1</code> Expat license <code>pydantic</code> Data validation and settings management using python type hints <code>!=1.8,!=1.8.1,&lt;1.11.0,&gt;=1.7.4</code> <code>1.10.13</code> MIT <code>pydocstyle</code> Python docstring style checker <code>&gt;=2.1</code> <code>6.3.0</code> MIT <code>pyflakes</code> passive checker of Python programs <code>&lt;3,&gt;=1.1.0</code> <code>2.5.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.4</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.4.3</code> MIT <code>pytest-asyncio</code> Pytest support for asyncio <code>&gt;=0.14</code> <code>0.21.1</code> Apache 2.0 <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.1.0</code> MIT <code>pytest-mock</code> Thin-wrapper around the mock package for easier use with pytest <code>&gt;=3.4</code> <code>3.12.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.15.0</code> MIT <code>pytest-sugar</code> pytest-sugar is a plugin for pytest that changes the default look and feel of pytest (e.g. progressbar, show tests that fail instantly). <code>&gt;=0.9</code> <code>0.9.7</code> BSD <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.4.0</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> MIT <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>~=2.26</code> <code>2.31.0</code> Apache 2.0 <code>rich</code> Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>13.7.0</code> MIT <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.5</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smart-open</code> Utils for streaming large files (S3, HDFS, GCS, Azure Blob Storage, gzip, bz2...) <code>&lt;7.0.0,&gt;=5.2.1</code> <code>6.4.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>sniffio</code> Sniff out which async library your code is running under <code>1.3.0</code> MIT OR Apache-2.0 <code>snowballstemmer</code> This package provides 29 stemmers for 28 languages generated from Snowball algorithms. <code>&gt;=2.2.0</code> <code>2.2.0</code> BSD-3-Clause <code>sortedcontainers</code> Sorted Containers -- Sorted List, Sorted Dict, Sorted Set <code>&lt;3.0.0,&gt;=2.1.0</code> <code>2.4.0</code> Apache 2.0 <code>spacy</code> Industrial-strength Natural Language Processing (NLP) in Python <code>&lt;3.5.0,&gt;=3.4.0</code> <code>3.4.4</code> MIT <code>spacy-legacy</code> Legacy registered functions for spaCy backwards compatibility <code>&lt;3.1.0,&gt;=3.0.10</code> <code>3.0.12</code> MIT <code>spacy-loggers</code> Logging utilities for SpaCy <code>&lt;2.0.0,&gt;=1.0.0</code> <code>1.0.5</code> MIT <code>srsly</code> Modern high-performance serialization utilities for Python <code>&lt;3.0.0,&gt;=2.4.3</code> <code>2.4.8</code> MIT <code>stevedore</code> Manage dynamic plugins for Python applications <code>&gt;=1.20.0</code> <code>5.1.0</code> Apache Software License <code>termcolor</code> ANSI color formatting for output in terminal <code>&gt;=2.1.0</code> <code>2.3.0</code> MIT <code>thinc</code> A refreshing functional take on deep learning, compatible with your favorite libraries <code>&lt;8.2.0,&gt;=8.1.0</code> <code>8.1.12</code> MIT <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=2.0.1; python_version &lt; \"3.11\"</code> <code>2.0.1</code> MIT License <code>tqdm</code> Fast, Extensible Progress Meter <code>&lt;5.0.0,&gt;=4.38.0</code> <code>4.66.1</code> MPL-2.0 AND MIT <code>typer</code> Typer, build great CLIs. Easy to code. Based on Python type hints. <code>&lt;0.8.0,&gt;=0.3.0</code> <code>0.7.0</code> MIT License <code>types-filelock</code> Typing stubs for filelock <code>3.2.7</code> Apache-2.0 license <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.5.0.3</code> Apache-2.0 license <code>types-python-dateutil</code> Typing stubs for python-dateutil <code>2.8.19.14</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.7</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&lt;4.6</code> <code>4.5.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26,&lt;2</code> <code>1.26.18</code> MIT <code>wasabi</code> A lightweight console printing and formatting toolkit <code>&lt;1.1.0,&gt;=0.9.1</code> <code>0.10.1</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>wps-light</code> The strictest and most opinionated python linter ever (lighter fork). <code>&gt;=0.15</code> <code>0.16.1</code> MIT <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> MIT License"},{"location":"license/","title":"CeCILL-C FREE SOFTWARE LICENSE AGREEMENT","text":""},{"location":"license/#notice","title":"Notice","text":"<p>This Agreement is a Free Software license agreement that is the result of discussions between its authors in order to ensure compliance with the two main principles guiding its drafting:</p> <ul> <li> <p>firstly, compliance with the principles governing the distribution of Free Software: access to source code, broad rights granted to users,</p> </li> <li> <p>secondly, the election of a governing law, French law, with which it is conformant, both as regards the law of torts and intellectual property law, and the protection that it offers to both authors and holders of the economic rights over software.</p> </li> </ul> <p>The authors of the CeCILL-C license are:</p> <ul> <li> <p>Commissariat \u00e0 l'Energie Atomique - CEA, a public scientific, technical and industrial research establishment, having its principal place of business at 25 rue Leblanc, immeuble Le Ponant D, 75015 Paris, France.</p> </li> <li> <p>Centre National de la Recherche Scientifique - CNRS, a public scientific and technological establishment, having its principal place of business at 3 rue Michel-Ange, 75794 Paris cedex 16, France.</p> </li> <li> <p>Institut National de Recherche en Informatique et en Automatique - INRIA, a public scientific and technological establishment, having its principal place of business at Domaine de Voluceau, Rocquencourt, BP 105, 78153 Le Chesnay cedex, France.</p> </li> </ul> <p> CeCILL stands for Ce(a) C(nrs) I(nria) L(ogiciel) L(ibre)</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The purpose of this Free Software license agreement is to grant users the right to modify and re-use the software governed by this license.</p> <p>The exercising of this right is conditional upon the obligation to make available to the community the modifications made to the source code of the software so as to contribute to its evolution.</p> <p>In consideration of access to the source code and the rights to copy, modify and redistribute granted by the license, users are provided only with a limited warranty and the software's author, the holder of the economic rights, and the successive licensors only have limited liability.</p> <p>In this respect, the risks associated with loading, using, modifying and/or developing or reproducing the software by the user are brought to the user's attention, given its Free Software status, which may make it complicated to use, with the result that its use is reserved for developers and experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the suitability of the software as regards their requirements in conditions enabling the security of their systems and/or data to be ensured and, more generally, to use and operate it in the same conditions of security. This Agreement may be freely reproduced and published, provided it is not altered, and that no provisions are either added or removed herefrom.</p> <p>This Agreement may apply to any or all software for which the holder of the economic rights decides to submit the use thereof to its provisions.</p>"},{"location":"license/#article-1-definitions","title":"Article 1 - DEFINITIONS","text":"<p>For the purpose of this Agreement, when the following expressions commence with a capital letter, they shall have the following meaning:</p> <p>Agreement: means this license agreement, and its possible subsequent versions and annexes.</p> <p>Software: means the software in its Object Code and/or Source Code form and, where applicable, its documentation, \"as is\" when the Licensee accepts the Agreement.</p> <p>Initial Software: means the Software in its Source Code and possibly its Object Code form and, where applicable, its documentation, \"as is\" when it is first distributed under the terms and conditions of the Agreement.</p> <p>Modified Software: means the Software modified by at least one Integrated Contribution.</p> <p>Source Code: means all the Software's instructions and program lines to which access is required so as to modify the Software.</p> <p>Object Code: means the binary files originating from the compilation of the Source Code.</p> <p>Holder: means the holder(s) of the economic rights over the Initial Software.</p> <p>Licensee: means the Software user(s) having accepted the Agreement.</p> <p>Contributor: means a Licensee having made at least one Integrated Contribution.</p> <p>Licensor: means the Holder, or any other individual or legal entity, who distributes the Software under the Agreement.</p> <p>Integrated Contribution: means any or all modifications, corrections, translations, adaptations and/or new functions integrated into the Source Code by any or all Contributors.</p> <p>Related Module: means a set of sources files including their documentation that, without modification to the Source Code, enables supplementary functions or services in addition to those offered by the Software.</p> <p>Derivative Software: means any combination of the Software, modified or not, and of a Related Module.</p> <p>Parties: mean both the Licensee and the Licensor.</p> <p>These expressions may be used both in singular and plural form.</p>"},{"location":"license/#article-2-purpose","title":"Article 2 - PURPOSE","text":"<p>The purpose of the Agreement is the grant by the Licensor to the Licensee of a non-exclusive, transferable and worldwide license for the Software as set forth in Article 5 hereinafter for the whole term of the protection granted by the rights over said Software.</p>"},{"location":"license/#article-3-acceptance","title":"Article 3 - ACCEPTANCE","text":"<p> 3.1 The Licensee shall be deemed as having accepted the terms and conditions of this Agreement upon the occurrence of the first of the following events:</p> <ul> <li> <p>(i) loading the Software by any or all means, notably, by downloading from a remote server, or by loading from a physical medium;</p> </li> <li> <p>(ii) the first time the Licensee exercises any of the rights granted hereunder.</p> </li> </ul> <p> 3.2 One copy of the Agreement, containing a notice relating to the characteristics of the Software, to the limited warranty, and to the fact that its use is restricted to experienced users has been provided to the Licensee prior to its acceptance as set forth in Article 3.1 hereinabove, and the Licensee hereby acknowledges that it has read and understood it.</p>"},{"location":"license/#article-4-effective-date-and-term","title":"Article 4 - EFFECTIVE DATE AND TERM","text":""},{"location":"license/#41-effective-date","title":"4.1 EFFECTIVE DATE","text":"<p>The Agreement shall become effective on the date when it is accepted by the Licensee as set forth in Article 3.1.</p>"},{"location":"license/#42-term","title":"4.2 TERM","text":"<p>The Agreement shall remain in force for the entire legal term of protection of the economic rights over the Software.</p>"},{"location":"license/#article-5-scope-of-rights-granted","title":"Article 5 - SCOPE OF RIGHTS GRANTED","text":"<p>The Licensor hereby grants to the Licensee, who accepts, the following rights over the Software for any or all use, and for the term of the Agreement, on the basis of the terms and conditions set forth hereinafter.</p> <p>Besides, if the Licensor owns or comes to own one or more patents protecting all or part of the functions of the Software or of its components, the Licensor undertakes not to enforce the rights granted by these patents against successive Licensees using, exploiting or modifying the Software. If these patents are transferred, the Licensor undertakes to have the transferees subscribe to the obligations set forth in this paragraph.</p>"},{"location":"license/#51-right-of-use","title":"5.1 RIGHT OF USE","text":"<p>The Licensee is authorized to use the Software, without any limitation as to its fields of application, with it being hereinafter specified that this comprises:</p> <ol> <li> <p>permanent or temporary reproduction of all or part of the Software by any or all means and in any or all form.</p> </li> <li> <p>loading, displaying, running, or storing the Software on any or all medium.</p> </li> <li> <p>entitlement to observe, study or test its operation so as to determine the ideas and principles behind any or all constituent elements of said Software. This shall apply when the Licensee carries out any or all loading, displaying, running, transmission or storage operation as regards the Software, that it is entitled to carry out hereunder.</p> </li> </ol>"},{"location":"license/#52-right-of-modification","title":"5.2 RIGHT OF MODIFICATION","text":"<p>The right of modification includes the right to translate, adapt, arrange, or make any or all modifications to the Software, and the right to reproduce the resulting software. It includes, in particular, the right to create a Derivative Software.</p> <p>The Licensee is authorized to make any or all modification to the Software provided that it includes an explicit notice that it is the author of said modification and indicates the date of the creation thereof.</p>"},{"location":"license/#53-right-of-distribution","title":"5.3 RIGHT OF DISTRIBUTION","text":"<p>In particular, the right of distribution includes the right to publish, transmit and communicate the Software to the general public on any or all medium, and by any or all means, and the right to market, either in consideration of a fee, or free of charge, one or more copies of the Software by any means.</p> <p>The Licensee is further authorized to distribute copies of the modified or unmodified Software to third parties according to the terms and conditions set forth hereinafter.</p>"},{"location":"license/#531-distribution-of-software-without-modification","title":"5.3.1 DISTRIBUTION OF SOFTWARE WITHOUT MODIFICATION","text":"<p>The Licensee is authorized to distribute true copies of the Software in Source Code or Object Code form, provided that said distribution complies with all the provisions of the Agreement and is accompanied by:</p> <ol> <li> <p>a copy of the Agreement,</p> </li> <li> <p>a notice relating to the limitation of both the Licensor's warranty and liability as set forth in Article 8 and Article 9,</p> </li> </ol> <p>and that, in the event that only the Object Code of the Software is redistributed, the Licensee allows effective access to the full Source Code of the Software at a minimum during the entire period of its distribution of the Software, it being understood that the additional cost of acquiring the Source Code shall not exceed the cost of transferring the data.</p>"},{"location":"license/#532-distribution-of-modified-software","title":"5.3.2 DISTRIBUTION OF MODIFIED SOFTWARE","text":"<p>When the Licensee makes an Integrated Contribution to the Software, the terms and conditions for the distribution of the resulting Modified Software become subject to all the provisions of this Agreement.</p> <p>The Licensee is authorized to distribute the Modified Software, in source code or object code form, provided that said distribution complies with all the provisions of the Agreement and is accompanied by:</p> <ol> <li> <p>a copy of the Agreement,</p> </li> <li> <p>a notice relating to the limitation of both the Licensor's warranty and liability as set forth in Article 8 and Article 9,</p> </li> </ol> <p>and that, in the event that only the object code of the Modified Software is redistributed, the Licensee allows effective access to the full source code of the Modified Software at a minimum during the entire period of its distribution of the Modified Software, it being understood that the additional cost of acquiring the source code shall not exceed the cost of transferring the data.</p>"},{"location":"license/#533-distribution-of-derivative-software","title":"5.3.3 DISTRIBUTION OF DERIVATIVE SOFTWARE","text":"<p>When the Licensee creates Derivative Software, this Derivative Software may be distributed under a license agreement other than this Agreement, subject to compliance with the requirement to include a notice concerning the rights over the Software as defined in Article 6.4. In the event the creation of the Derivative Software required modification of the Source Code, the Licensee undertakes that:</p> <ol> <li> <p>the resulting Modified Software will be governed by this Agreement,</p> </li> <li> <p>the Integrated Contributions in the resulting Modified Software will be clearly identified and documented,</p> </li> <li> <p>the Licensee will allow effective access to the source code of the Modified Software, at a minimum during the entire period of distribution of the Derivative Software, such that such modifications may be carried over in a subsequent version of the Software; it being understood that the additional cost of purchasing the source code of the Modified Software shall not exceed the cost of transferring the data.</p> </li> </ol>"},{"location":"license/#534-compatibility-with-the-cecill-license","title":"5.3.4 COMPATIBILITY WITH THE CeCILL LICENSE","text":"<p>When a Modified Software contains an Integrated Contribution subject to the CeCILL license agreement, or when a Derivative Software contains a Related Module subject to the CeCILL license agreement, the provisions set forth in the third item of Article 6.4 are optional.</p>"},{"location":"license/#article-6-intellectual-property","title":"Article 6 - INTELLECTUAL PROPERTY","text":""},{"location":"license/#61-over-the-initial-software","title":"6.1 OVER THE INITIAL SOFTWARE","text":"<p>The Holder owns the economic rights over the Initial Software. Any or all use of the Initial Software is subject to compliance with the terms and conditions under which the Holder has elected to distribute its work and no one shall be entitled to modify the terms and conditions for the distribution of said Initial Software.</p> <p>The Holder undertakes that the Initial Software will remain ruled at least by this Agreement, for the duration set forth in Article 4.2.</p>"},{"location":"license/#62-over-the-integrated-contributions","title":"6.2 OVER THE INTEGRATED CONTRIBUTIONS","text":"<p>The Licensee who develops an Integrated Contribution is the owner of the intellectual property rights over this Contribution as defined by applicable law.</p>"},{"location":"license/#63-over-the-related-modules","title":"6.3 OVER THE RELATED MODULES","text":"<p>The Licensee who develops a Related Module is the owner of the intellectual property rights over this Related Module as defined by applicable law and is free to choose the type of agreement that shall govern its distribution under the conditions defined in Article 5.3.3.</p>"},{"location":"license/#64-notice-of-rights","title":"6.4 NOTICE OF RIGHTS","text":"<p>The Licensee expressly undertakes:</p> <ol> <li> <p>not to remove, or modify, in any manner, the intellectual property notices attached to the Software;</p> </li> <li> <p>to reproduce said notices, in an identical manner, in the copies of the Software modified or not;</p> </li> <li> <p>to ensure that use of the Software, its intellectual property notices and the fact that it is governed by the Agreement is indicated in a text that is easily accessible, specifically from the interface of any Derivative Software.</p> </li> </ol> <p>The Licensee undertakes not to directly or indirectly infringe the intellectual property rights of the Holder and/or Contributors on the Software and to take, where applicable, vis-\u00e0-vis its staff, any and all measures required to ensure respect of said intellectual property rights of the Holder and/or Contributors.</p>"},{"location":"license/#article-7-related-services","title":"Article 7 - RELATED SERVICES","text":"<p> 7.1 Under no circumstances shall the Agreement oblige the Licensor to provide technical assistance or maintenance services for the Software.</p> <p>However, the Licensor is entitled to offer this type of services. The terms and conditions of such technical assistance, and/or such maintenance, shall be set forth in a separate instrument. Only the Licensor offering said maintenance and/or technical assistance services shall incur liability therefor.</p> <p> 7.2 Similarly, any Licensor is entitled to offer to its licensees, under its sole responsibility, a warranty, that shall only be binding upon itself, for the redistribution of the Software and/or the Modified Software, under terms and conditions that it is free to decide. Said warranty, and the financial terms and conditions of its application, shall be subject of a separate instrument executed between the Licensor and the Licensee.</p>"},{"location":"license/#article-8-liability","title":"Article 8 - LIABILITY","text":"<p> 8.1 Subject to the provisions of Article 8.2, the Licensee shall be entitled to claim compensation for any direct loss it may have suffered from the Software as a result of a fault on the part of the relevant Licensor, subject to providing evidence thereof.</p> <p> 8.2 The Licensor's liability is limited to the commitments made under this Agreement and shall not be incurred as a result of in particular:</p> <ul> <li> <p>(i) loss due the Licensee's total or partial failure to fulfill its obligations,</p> </li> <li> <p>(ii) direct or consequential loss that is suffered by the Licensee due to the use or performance of the Software, and</p> </li> <li> <p>(iii) more generally, any consequential loss.</p> </li> </ul> <p>In particular the Parties expressly agree that any or all pecuniary or business loss (i.e. loss of data, loss of profits, operating loss, loss of customers or orders, opportunity cost, any disturbance to business activities) or any or all legal proceedings instituted against the Licensee by a third party, shall constitute consequential loss and shall not provide entitlement to any or all compensation from the Licensor.</p>"},{"location":"license/#article-9-warranty","title":"Article 9 - WARRANTY","text":"<p> 9.1 The Licensee acknowledges that the scientific and technical state-of-the-art when the Software was distributed did not enable all possible uses to be tested and verified, nor for the presence of possible defects to be detected. In this respect, the Licensee's attention has been drawn to the risks associated with loading, using, modifying and/or developing and reproducing the Software which are reserved for experienced users.</p> <p>The Licensee shall be responsible for verifying, by any or all means, the suitability of the product for its requirements, its good working order, and for ensuring that it shall not cause damage to either persons or properties.</p> <p> 9.2 The Licensor hereby represents, in good faith, that it is entitled to grant all the rights over the Software (including in particular the rights set forth in Article 5).</p> <p> 9.3 The Licensee acknowledges that the Software is supplied \"as is\" by the Licensor without any other express or tacit warranty, other than that provided for in Article 9.2 and, in particular, without any warranty as to its commercial value, its secured, safe, innovative or relevant nature.</p> <p>Specifically, the Licensor does not warrant that the Software is free from any error, that it will operate without interruption, that it will be compatible with the Licensee's own equipment and software configuration, nor that it will meet the Licensee's requirements.</p> <p> 9.4 The Licensor does not either expressly or tacitly warrant that the Software does not infringe any third party intellectual property right relating to a patent, software or any other property right. Therefore, the Licensor disclaims any and all liability towards the Licensee arising out of any or all proceedings for infringement that may be instituted in respect of the use, modification and redistribution of the Software. Nevertheless, should such proceedings be instituted against the Licensee, the Licensor shall provide it with technical and legal assistance for its defense. Such technical and legal assistance shall be decided on a case-by-case basis between the relevant Licensor and the Licensee pursuant to a memorandum of understanding. The Licensor disclaims any and all liability as regards the Licensee's use of the name of the Software. No warranty is given as regards the existence of prior rights over the name of the Software or as regards the existence of a trademark.</p>"},{"location":"license/#article-10-termination","title":"Article 10 - TERMINATION","text":"<p> 10.1 In the event of a breach by the Licensee of its obligations hereunder, the Licensor may automatically terminate this Agreement thirty (30) days after notice has been sent to the Licensee and has remained ineffective.</p> <p> 10.2 A Licensee whose Agreement is terminated shall no longer be authorized to use, modify or distribute the Software. However, any licenses that it may have granted prior to termination of the Agreement shall remain valid subject to their having been granted in compliance with the terms and conditions hereof.</p>"},{"location":"license/#article-11-miscellaneous","title":"Article 11 - MISCELLANEOUS","text":"<p> 11.1 EXCUSABLE EVENTS Neither Party shall be liable for any or all delay, or failure to perform the Agreement, that may be attributable to an event of force majeure, an act of God or an outside cause, such as defective functioning or interruptions of the electricity or telecommunications networks, network paralysis following a virus attack, intervention by government authorities, natural disasters, water damage, earthquakes, fire, explosions, strikes and labor unrest, war, etc.</p> <p> 11.2 Any failure by either Party, on one or more occasions, to invoke one or more of the provisions hereof, shall under no circumstances be interpreted as being a waiver by the interested Party of its right to invoke said provision(s) subsequently.</p> <p> 11.3 The Agreement cancels and replaces any or all previous agreements, whether written or oral, between the Parties and having the same purpose, and constitutes the entirety of the agreement between said Parties concerning said purpose. No supplement or modification to the terms and conditions hereof shall be effective as between the Parties unless it is made in writing and signed by their duly authorized representatives.</p> <p> 11.4 In the event that one or more of the provisions hereof were to conflict with a current or future applicable act or legislative text, said act or legislative text shall prevail, and the Parties shall make the necessary amendments so as to comply with said act or legislative text. All other provisions shall remain effective. Similarly, invalidity of a provision of the Agreement, for any reason whatsoever, shall not cause the Agreement as a whole to be invalid.</p> <p> 11.5 LANGUAGE The Agreement is drafted in both French and English and both versions are deemed authentic.</p>"},{"location":"license/#article-12-new-versions-of-the-agreement","title":"Article 12 - NEW VERSIONS OF THE AGREEMENT","text":"<p> 12.1 Any person is authorized to duplicate and distribute copies of this Agreement.</p> <p> 12.2 So as to ensure coherence, the wording of this Agreement is protected and may only be modified by the authors of the License, who reserve the right to periodically publish updates or new versions of the Agreement, each with a separate number. These subsequent versions may address new issues encountered by Free Software.</p> <p> 12.3 Any Software distributed under a given version of the Agreement may only be subsequently distributed under the same version of the Agreement or a subsequent version.</p>"},{"location":"license/#article-13-governing-law-and-jurisdiction","title":"Article 13 - GOVERNING LAW AND JURISDICTION","text":"<p> 13.1 The Agreement is governed by French law. The Parties agree to endeavor to seek an amicable solution to any disagreements or disputes that may arise during the performance of the Agreement.</p> <p> 13.2 Failing an amicable solution within two (2) months as from their occurrence, and unless emergency proceedings are necessary, the disagreements or disputes shall be referred to the Paris Courts having jurisdiction, by the more diligent Party.</p> <p>Version 1.0 dated 2006-09-05.</p>"},{"location":"docs/figures/","title":"Index","text":"<p>This figures are used in integration of main repository <code>README.md</code> in repository documentation with mkdocs (<code>pdm run duty docs</code>).</p> <p>They are duplicates of <code>docs/figures/</code>, used in main repository <code>README.md</code> on GitHub.</p>"},{"location":"figures/","title":"Index","text":"<p>This figures are used in main repository <code>README.md</code> on GitHub.</p> <p>Duplicate <code>docs/figures/</code> in <code>docs/docs/figures/</code> in order to make available these figures for integration of main repository <code>README.md</code> in repository documentation with mkdocs (<code>pdm run duty docs</code>).</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>cognitivefactory<ul> <li>interactive_clustering_gui<ul> <li>app</li> <li>backgroundtasks</li> <li>cli</li> <li>models<ul> <li>queries</li> <li>settings</li> <li>states</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/","title":"interactive_clustering_gui","text":"<p>Interactive Clustering GUI package.</p> <p>Web application for Interactive Clustering methodology</p>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/","title":"app","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.app</li> <li>Description:  Definition of FastAPI application and routes for interactive clustering graphical user interface.</li> <li>Author:       Erwan Schild</li> <li>Created:      22/10/2021</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.alive","title":"<code>alive()</code>  <code>async</code>","text":"<p>Tell if the API is alive/healthy.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>An HTTP response with either 200 or 503 codes.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/alive\",\n    tags=[\"app state\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def alive() -&gt; Response:  # pragma: no cover\n    \"\"\"\n    Tell if the API is alive/healthy.\n\n    Returns:\n        Response: An HTTP response with either 200 or 503 codes.\n    \"\"\"\n\n    try:\n        # Assert the volume can be reached.\n        pathlib.Path(DATA_DIRECTORY / \".available\").touch()\n        # Or anything else asserting the API is healthy.\n    except OSError:\n        return Response(status_code=status.HTTP_503_SERVICE_UNAVAILABLE)\n    return Response(status_code=status.HTTP_200_OK)\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.annotate_constraint","title":"<code>annotate_constraint(project_id=Path(..., description='The ID of the project.'), constraint_id=Path(..., description='The ID of the constraint.'), constraint_type=Query(None, description='The type of constraint to annotate. Defaults to `None`.'))</code>  <code>async</code>","text":"<p>Annotate a constraint.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>constraint_id</code> <code>str</code> <p>The ID of the constraint.</p> <code>Path(..., description='The ID of the constraint.')</code> <code>constraint_type</code> <code>Optional[ConstraintsValues]</code> <p>The type of constraint to annotate. Defaults to <code>None</code>.</p> <code>Query(None, description='The type of constraint to annotate. Defaults to `None`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the constraint with id <code>constraint_id</code> to annotate doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow modification.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of annotated constraint.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/constraints/{constraint_id}/annotate\",\n    tags=[\"Constraints\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def annotate_constraint(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    constraint_id: str = Path(\n        ...,\n        description=\"The ID of the constraint.\",\n    ),\n    constraint_type: Optional[ConstraintsValues] = Query(\n        None,\n        description=\"The type of constraint to annotate. Defaults to `None`.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Annotate a constraint.\n\n    Args:\n        project_id (str): The ID of the project.\n        constraint_id (str): The ID of the constraint.\n        constraint_type (Optional[ConstraintsValues]): The type of constraint to annotate. Defaults to `None`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the constraint with id `constraint_id` to annotate doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow modification.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of annotated constraint.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Load constraints file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n            constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check constraint id.\n        if constraint_id not in constraints.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' to annotate doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    constraint_id_str=str(constraint_id),\n                ),\n            )\n\n        # Check status.\n        if (\n            project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION  # noqa: WPS514\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        ):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow modification during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"outdated\" status.\n        if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n\n        # Update constraints by updating the constraint history.\n        constraints[constraint_id][\"constraint_type_previous\"].append(constraints[constraint_id][\"constraint_type\"])\n\n        # Update constraints by annotating the constraint.\n        constraints[constraint_id][\"constraint_type\"] = constraint_type\n        constraints[constraint_id][\"date_of_update\"] = datetime.now().timestamp()\n\n        # Force annotation status.\n        constraints[constraint_id][\"to_annotate\"] = False\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Store updated constraints in file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n            json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"constraint_id\": constraint_id,\n        \"detail\": \"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' has been annotated at `{constraint_type_str}`.\".format(\n            project_id_str=str(project_id),\n            constraint_id_str=str(constraint_id),\n            constraint_type_str=\"None\" if (constraint_type is None) else str(constraint_type.value),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.approve_all_constraints","title":"<code>approve_all_constraints(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Approve all constraints.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow constraints approbation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the confirmation of constraints approbation.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects/{project_id}/constraints/approve\",\n    tags=[\"Constraints\"],\n    status_code=status.HTTP_201_CREATED,\n)\nasync def approve_all_constraints(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Approve all constraints.\n\n    Args:\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow constraints approbation.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the confirmation of constraints approbation.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Check status.\n        if project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow constraints approbation during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status to clustering step.\n        project_status[\"state\"] = ICGUIStates.CLUSTERING_TODO\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"detail\": \"In project with id '{project_id_str}', the constraints have been approved.\".format(\n            project_id_str=str(project_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.comment_constraint","title":"<code>comment_constraint(project_id=Path(..., description='The ID of the project.'), constraint_id=Path(..., description='The ID of the constraint.'), constraint_comment=Query(..., description='The comment of constraint.', max_length=256))</code>  <code>async</code>","text":"<p>Comment a constraint.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>constraint_id</code> <code>str</code> <p>The ID of the constraint.</p> <code>Path(..., description='The ID of the constraint.')</code> <code>constraint_comment</code> <code>str</code> <p>The comment of constraint.</p> <code>Query(..., description='The comment of constraint.', max_length=256)</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the constraint with id <code>constraint_id</code> to annotate doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of commented constraint.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/constraints/{constraint_id}/comment\",\n    tags=[\"Constraints\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def comment_constraint(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    constraint_id: str = Path(\n        ...,\n        description=\"The ID of the constraint.\",\n    ),\n    constraint_comment: str = Query(\n        ...,\n        description=\"The comment of constraint.\",\n        # min_length=0,\n        max_length=256,\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Comment a constraint.\n\n    Args:\n        project_id (str): The ID of the project.\n        constraint_id (str): The ID of the constraint.\n        constraint_comment (str): The comment of constraint.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the constraint with id `constraint_id` to annotate doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of commented constraint.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load constraints file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n            constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check constraint id.\n        if constraint_id not in constraints.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' to annotate doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    constraint_id_str=str(constraint_id),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update constraints by commenting the constraint.\n        constraints[constraint_id][\"comment\"] = constraint_comment\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated constraints in file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n            json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"constraint_id\": constraint_id,\n        \"constraint_comment\": constraint_comment,\n        \"detail\": \"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' has been commented.\".format(\n            project_id_str=str(project_id),\n            constraint_id_str=str(constraint_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.create_project","title":"<code>create_project(project_name=Query(..., description='The name of the project. Should not be an empty string.', min_length=3, max_length=64), dataset_file=File(..., description=\"The dataset file to load. Use a `.csv` (`;` separator) or `.xlsx` file. Please use a list of texts in the first column, without header, with encoding 'utf-8'.\"))</code>  <code>async</code>","text":"<p>Create a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project. Should not be an empty string.</p> <code>Query(..., description='The name of the project. Should not be an empty string.', min_length=3, max_length=64)</code> <code>dataset_file</code> <code>UploadFile</code> <p>The dataset file to load. Use a <code>.csv</code> (<code>;</code> separator) or <code>.xlsx</code> file. Please use a list of texts in the first column, without header, with encoding 'utf-8'.</p> <code>File(..., description=\"The dataset file to load. Use a `.csv` (`;` separator) or `.xlsx` file. Please use a list of texts in the first column, without header, with encoding 'utf-8'.\")</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_400_BAD_REQUEST</code> if parameters <code>project_name</code> or <code>dataset_file</code> are invalid.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of the created project.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects\",\n    tags=[\"Projects\"],\n    status_code=status.HTTP_201_CREATED,\n)\nasync def create_project(\n    project_name: str = Query(\n        ...,\n        description=\"The name of the project. Should not be an empty string.\",\n        min_length=3,\n        max_length=64,\n    ),\n    dataset_file: UploadFile = File(\n        ...,\n        description=\"The dataset file to load. Use a `.csv` (`;` separator) or `.xlsx` file. Please use a list of texts in the first column, without header, with encoding 'utf-8'.\",\n        # TODO: max_size=\"8MB\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a project.\n\n    Args:\n        project_name (str): The name of the project. Should not be an empty string.\n        dataset_file (UploadFile): The dataset file to load. Use a `.csv` (`;` separator) or `.xlsx` file. Please use a list of texts in the first column, without header, with encoding 'utf-8'.\n\n    Raises:\n        HTTPException: Raises `HTTP_400_BAD_REQUEST` if parameters `project_name` or `dataset_file` are invalid.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of the created project.\n    \"\"\"\n\n    # Define the new project ID.\n    current_timestamp: float = datetime.now().timestamp()\n    current_project_id: str = str(int(current_timestamp * 10**6))\n\n    # Check project name.\n    if project_name.strip() == \"\":\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"The project name '{project_name_str}' is invalid.\".format(\n                project_name_str=str(project_name),\n            ),\n        )\n\n    # Initialize variable to store loaded dataset.\n    list_of_texts: List[str] = []\n\n    # Load dataset: Case of `.csv` with `;` separator.\n    if dataset_file.content_type in {\"text/csv\", \"application/vnd.ms-excel\"}:\n        # \"text/csv\" == \".csv\"\n        # \"application/vnd.ms-excel\" == \".xls\"\n        try:  # noqa: WPS229  # Found too long `try` body length\n            dataset_csv: pd.Dataframe = pd.read_csv(\n                filepath_or_buffer=dataset_file.file,\n                sep=\";\",\n                header=None,  # No header expected in the csv file.\n            )\n            list_of_texts = dataset_csv[dataset_csv.columns[0]].tolist()\n        except Exception:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"The dataset file is invalid. `.csv` file, with `;` separator, must contain a list of texts in the first column, with no header.\",\n            )\n    # Load dataset: Case of `.xlsx`.\n    elif dataset_file.content_type == \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":\n        # \"application/vnd.ms-excel\" == \".xlsx\"\n        try:  # noqa: WPS229  # Found too long `try` body length\n            dataset_xlsx: pd.Dataframe = pd.read_excel(\n                io=dataset_file.file.read(),\n                engine=\"openpyxl\",\n                header=None,  # No header expected in the xlsx file.\n            )\n            list_of_texts = dataset_xlsx[dataset_xlsx.columns[0]].tolist()\n        except Exception:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"The dataset file is invalid. `.xlsx` file must contain a list of texts in the first column, with no header.\",\n            )\n\n    # Load dataset: case of not supported type.\n    else:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"The file type '{dataset_file_type}' is not supported. Please use '.csv' (`;` separator) or '.xlsx' file.\".format(\n                dataset_file_type=str(dataset_file.content_type),\n            ),\n        )\n\n    # Create the directory and subdirectories of the new project.\n    os.mkdir(DATA_DIRECTORY / current_project_id)\n\n    # Initialize storage of metadata.\n    with open(DATA_DIRECTORY / current_project_id / \"metadata.json\", \"w\") as metadata_fileobject:\n        json.dump(\n            {\n                \"project_id\": current_project_id,\n                \"project_name\": str(project_name.strip()),\n                \"creation_timestamp\": current_timestamp,\n            },\n            metadata_fileobject,\n            indent=4,\n        )\n\n    # Initialize storage of status.\n    with open(DATA_DIRECTORY / current_project_id / \"status.json\", \"w\") as status_fileobject:\n        json.dump(\n            {\n                \"iteration_id\": 0,  # Use string format for JSON serialization in dictionaries.\n                \"state\": ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION,\n                \"task\": None,  # \"progression\", \"detail\".\n            },\n            status_fileobject,\n            indent=4,\n        )\n\n    # Initialize storage of texts.\n    with open(DATA_DIRECTORY / current_project_id / \"texts.json\", \"w\") as texts_fileobject:\n        json.dump(\n            {\n                str(i): {\n                    \"text_original\": str(text),  # Will never be changed.\n                    \"text\": str(text),  # Can be change by renaming.\n                    \"text_preprocessed\": str(text),  # Will be preprocessed during `Modelizationpdate` task.\n                    \"is_deleted\": False,\n                }\n                for i, text in enumerate(list_of_texts)\n            },\n            texts_fileobject,\n            indent=4,\n        )\n\n    # Initialize storage of constraints.\n    with open(DATA_DIRECTORY / current_project_id / \"constraints.json\", \"w\") as constraints_fileobject:\n        json.dump(\n            {},  # Dict[str, Any]\n            constraints_fileobject,\n            indent=4,\n        )\n\n    # Initialize storage of modelization inference assignations.\n    with open(DATA_DIRECTORY / current_project_id / \"modelization.json\", \"w\") as modelization_fileobject:\n        json.dump(\n            {str(i): {\"MUST_LINK\": [str(i)], \"CANNOT_LINK\": [], \"COMPONENT\": i} for i in range(len(list_of_texts))},\n            modelization_fileobject,\n            indent=4,\n        )\n\n    # Initialize settings storage.\n    with open(DATA_DIRECTORY / current_project_id / \"settings.json\", \"w\") as settings_fileobject:\n        json.dump(\n            {\n                \"0\": {\n                    \"preprocessing\": default_PreprocessingSettingsModel().to_dict(),\n                    \"vectorization\": default_VectorizationSettingsModel().to_dict(),\n                    \"clustering\": default_ClusteringSettingsModel().to_dict(),\n                },\n            },\n            settings_fileobject,\n            indent=4,\n        )\n\n    # Initialize storage of sampling results.\n    with open(DATA_DIRECTORY / current_project_id / \"sampling.json\", \"w\") as sampling_fileobject:\n        json.dump({}, sampling_fileobject, indent=4)  # Dict[str, List[str]]\n\n    # Initialize storage of clustering results.\n    with open(DATA_DIRECTORY / current_project_id / \"clustering.json\", \"w\") as clustering_fileobject:\n        json.dump({}, clustering_fileobject, indent=4)  # Dict[str, Dict[str, str]]\n\n    # Return the ID of the created project.\n    return {\n        \"project_id\": current_project_id,\n        \"detail\": \"The project with name '{project_name_str}' has been created. It has the id '{project_id_str}'.\".format(\n            project_name_str=str(project_name),\n            project_id_str=str(current_project_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.delete_project","title":"<code>delete_project(project_id=Path(..., description='The ID of the project to delete.'))</code>  <code>async</code>","text":"<p>Delete a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project to delete.</p> <code>Path(..., description='The ID of the project to delete.')</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of the deleted project.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.delete(\n    \"/api/projects/{project_id}\",\n    tags=[\"Projects\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def delete_project(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project to delete.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a project.\n\n    Args:\n        project_id (str): The ID of the project to delete.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of the deleted project.\n    \"\"\"\n\n    # Delete the project.\n    if os.path.isdir(DATA_DIRECTORY / project_id):\n        shutil.rmtree(DATA_DIRECTORY / project_id, ignore_errors=True)\n\n    # Return the deleted project id.\n    return {\n        \"project_id\": project_id,\n        \"detail\": \"The deletion of project with id '{project_id_str}' is accepted.\".format(\n            project_id_str=str(project_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.delete_text","title":"<code>delete_text(project_id=Path(..., description='The ID of the project.'), text_id=Path(..., description='The ID of the text.'))</code>  <code>async</code>","text":"<p>Delete a text.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>text_id</code> <code>str</code> <p>The ID of the text.</p> <code>Path(..., description='The ID of the text.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the text with id <code>text_id</code> to delete doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow modification.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of deleted text.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/texts/{text_id}/delete\",\n    tags=[\"Texts\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def delete_text(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    text_id: str = Path(\n        ...,\n        description=\"The ID of the text.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a text.\n\n    Args:\n        project_id (str): The ID of the project.\n        text_id (str): The ID of the text.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the text with id `text_id` to delete doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow modification.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of deleted text.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Load texts file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject_r:\n            texts: Dict[str, Any] = json.load(texts_fileobject_r)\n\n        # Load constraints file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n            constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check text id.\n        if text_id not in texts.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the text with id '{text_id_str}' to delete doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    text_id_str=str(text_id),\n                ),\n            )\n\n        # Check status.\n        if (\n            project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION  # noqa: WPS514\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        ):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow modification during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"outdated\" status.\n        if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n\n        # Update texts by deleting the text.\n        texts[text_id][\"is_deleted\"] = True\n\n        # Update constraints by hidding those associated with the deleted text.\n        for constraint_id, constraint_value in constraints.items():\n            data_id1: str = constraint_value[\"data\"][\"id_1\"]\n            data_id2: str = constraint_value[\"data\"][\"id_2\"]\n\n            if text_id in {\n                data_id1,\n                data_id2,\n            }:\n                constraints[constraint_id][\"is_hidden\"] = True\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Store updated texts in file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"w\") as texts_fileobject_w:\n            json.dump(texts, texts_fileobject_w, indent=4)\n\n        # Store updated constraints in file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n            json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"text_id\": text_id,\n        \"detail\": \"In project with id '{project_id_str}', the text with id '{text_id_str}' has been deleted. Several constraints have been hidden.\".format(\n            project_id_str=str(project_id),\n            text_id_str=str(text_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.download_project","title":"<code>download_project(background_tasks, project_id=Path(..., description='The ID of the project to download.'))</code>  <code>async</code>","text":"<p>Download a project in a zip archive.</p> <p>Parameters:</p> Name Type Description Default <code>background_tasks</code> <code>BackgroundTasks</code> <p>A background task to run after the return statement.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project to download.</p> <code>Path(..., description='The ID of the project to download.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Name Type Description <code>FileResponse</code> <code>FileResponse</code> <p>A zip archive of the project.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/download\",\n    tags=[\"Projects\"],\n    response_class=FileResponse,\n    status_code=status.HTTP_200_OK,\n)\nasync def download_project(\n    background_tasks: BackgroundTasks,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project to download.\",\n    ),\n) -&gt; FileResponse:\n    \"\"\"\n    Download a project in a zip archive.\n\n    Args:\n        background_tasks (BackgroundTasks): A background task to run after the return statement.\n        project_id (str): The ID of the project to download.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        FileResponse: A zip archive of the project.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Define archive name.\n    archive_name: str = \"archive-{project_id_str}.zip\".format(project_id_str=str(project_id))\n    archive_path: pathlib.Path = DATA_DIRECTORY / project_id / archive_name\n\n    # Zip the project in an archive.\n    with zipfile.ZipFile(archive_path, \"w\", zipfile.ZIP_DEFLATED) as archive_filewriter:\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"metadata.json\", arcname=\"metadata.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"status.json\", arcname=\"status.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"texts.json\", arcname=\"texts.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"constraints.json\", arcname=\"constraints.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"settings.json\", arcname=\"settings.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"sampling.json\", arcname=\"sampling.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"clustering.json\", arcname=\"clustering.json\")\n        archive_filewriter.write(DATA_DIRECTORY / project_id / \"modelization.json\", arcname=\"modelization.json\")\n        if \"vectors_2D.json\" in os.listdir(DATA_DIRECTORY / project_id):\n            archive_filewriter.write(DATA_DIRECTORY / project_id / \"vectors_2D.json\", arcname=\"vectors_2D.json\")\n        if \"vectors_3D.json\" in os.listdir(DATA_DIRECTORY / project_id):\n            archive_filewriter.write(DATA_DIRECTORY / project_id / \"vectors_3D.json\", arcname=\"vectors_3D.json\")\n\n    # Define a backgroundtask to clear archive after downloading.\n    def clear_after_download_project():  # noqa: WPS430 (nested function)\n        \"\"\"\n        Delete the archive file.\n        \"\"\"\n\n        # Delete archive file.\n        if os.path.exists(archive_path):  # pragma: no cover\n            os.remove(archive_path)\n\n    # Add the background task.\n    background_tasks.add_task(\n        func=clear_after_download_project,\n    )\n\n    # Return the zip archive of the project.\n    return FileResponse(\n        archive_path,\n        media_type=\"application/x-zip-compressed\",\n        filename=archive_name,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_constrained_clustering_results","title":"<code>get_constrained_clustering_results(project_id=Path(..., description='The ID of the project.'), iteration_id=Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.'))</code>  <code>async</code>","text":"<p>Get constrained clustering results.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>iteration_id</code> <code>Optional[int]</code> <p>The ID of project iteration. If <code>None</code>, get the current iteration. Defaults to <code>None</code>.</p> <code>Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the iteration with id <code>iteration_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the status of the project hasn't completed its clustering step.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains clustering result.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/clustering\",\n    tags=[\"Constrained clustering\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_constrained_clustering_results(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    iteration_id: Optional[int] = Query(\n        None,\n        description=\"The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get constrained clustering results.\n\n    Args:\n        project_id (str, optional): The ID of the project.\n        iteration_id (Optional[int], optional): The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the iteration with id `iteration_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the status of the project hasn't completed its clustering step.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains clustering result.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n        project_status: Dict[str, Any] = json.load(status_fileobject)\n\n    # Load clustering.\n    with open(DATA_DIRECTORY / project_id / \"clustering.json\", \"r\") as clustering_fileobject:\n        project_clustering: Dict[str, Dict[str, Any]] = json.load(clustering_fileobject)\n\n    # Set iteration id if needed.\n    if iteration_id is None:\n        if (\n            project_status[\"iteration_id\"] == 0\n            or project_status[\"state\"] == ICGUIStates.ITERATION_END\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_ERRORS\n        ):\n            iteration_id = project_status[\"iteration_id\"]\n        else:\n            iteration_id = project_status[\"iteration_id\"] - 1\n\n    # Check project status.\n    if (\n        iteration_id == project_status[\"iteration_id\"]\n        and project_status[\"state\"] != ICGUIStates.ITERATION_END\n        and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\n        and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION\n        and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION\n        and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ITERATION_END_WITH_ERRORS\n    ):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The project with id '{project_id_str}' hasn't completed its clustering step on iteration '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(iteration_id),\n            ),\n        )\n\n    # Otherwise check that requested iteration id exist.\n    if str(iteration_id) not in project_clustering.keys():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' has no iteration with id '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(iteration_id),\n            ),\n        )\n\n    # Return the project clustering.\n    return {\n        \"project_id\": project_id,\n        \"iteration_id\": iteration_id,\n        \"clustering\": project_clustering[str(iteration_id)],\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_constraints","title":"<code>get_constraints(project_id=Path(..., description='The ID of the project.'), without_hidden_constraints=Query(True, description='The option to not return hidden constraints. Defaults to `True`.'), sorted_by=Query(ConstraintsSortOptions.ID, description='The option to sort constraints. Defaults to `ID`.'), sorted_reverse=Query(False, description='The option to reverse constraints order. Defaults to `False`.'))</code>  <code>async</code>","text":"<p>Get constraints.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>without_hidden_constraints</code> <code>bool</code> <p>The option to not return hidden constraints. Defaults to <code>True</code>.</p> <code>Query(True, description='The option to not return hidden constraints. Defaults to `True`.')</code> <code>sorted_by</code> <code>ConstraintsSortOptions</code> <p>The option to sort constraints. Defaults to <code>ID</code>.</p> <code>Query(ID, description='The option to sort constraints. Defaults to `ID`.')</code> <code>sorted_reverse</code> <code>bool</code> <p>The option to reverse constraints order. Defaults to <code>False</code>.</p> <code>Query(False, description='The option to reverse constraints order. Defaults to `False`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains constraints.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/constraints\",\n    tags=[\"Constraints\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_constraints(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    without_hidden_constraints: bool = Query(\n        True,\n        description=\"The option to not return hidden constraints. Defaults to `True`.\",\n    ),\n    sorted_by: ConstraintsSortOptions = Query(\n        ConstraintsSortOptions.ID,\n        description=\"The option to sort constraints. Defaults to `ID`.\",\n    ),\n    sorted_reverse: bool = Query(\n        False,\n        description=\"The option to reverse constraints order. Defaults to `False`.\",\n    ),\n    # TODO: filter_text\n    # TODO: limit_size + offset\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get constraints.\n\n    Args:\n        project_id (str): The ID of the project.\n        without_hidden_constraints (bool, optional): The option to not return hidden constraints. Defaults to `True`.\n        sorted_by (ConstraintsSortOptions, optional): The option to sort constraints. Defaults to `ID`.\n        sorted_reverse (bool, optional): The option to reverse constraints order. Defaults to `False`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains constraints.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    ###\n    ### Load needed data.\n    ###\n\n    # Load constraints.\n    with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject:\n        constraints: Dict[str, Any] = {\n            constraint_id: constraint_value\n            for constraint_id, constraint_value in json.load(constraints_fileobject).items()\n            if (without_hidden_constraints is False or constraint_value[\"is_hidden\"] is False)\n        }\n\n    # Load texts.\n    with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject:\n        texts: Dict[str, Any] = json.load(texts_fileobject)\n\n    ###\n    ### Sort constraints.\n    ###\n\n    # Define the values selection method.\n    def get_value_for_constraints_sorting(  # noqa: WPS430 (nested function)\n        constraint_to_sort: Tuple[str, Dict[str, Any]]\n    ) -&gt; Any:\n        \"\"\"Return the values expected for constraints sorting.\n\n        Args:\n            constraint_to_sort (Tuple[Dict[str, Any]]): A constraint (from `.items()`).\n\n        Returns:\n            Any: The expected values of the constraint need for the sort.\n        \"\"\"\n        # By constraint id.\n        if sorted_by == ConstraintsSortOptions.ID:\n            return constraint_to_sort[0]\n        # By texts.\n        if sorted_by == ConstraintsSortOptions.TEXT:\n            return (\n                texts[constraint_to_sort[1][\"data\"][\"id_1\"]][\"text\"],\n                texts[constraint_to_sort[1][\"data\"][\"id_2\"]][\"text\"],\n            )\n        # By constraint type.\n        if sorted_by == ConstraintsSortOptions.CONSTRAINT_TYPE:\n            return (\n                constraint_to_sort[1][\"constraint_type\"] is None,\n                constraint_to_sort[1][\"constraint_type\"] == \"CANNOT_LINK\",\n                constraint_to_sort[1][\"constraint_type\"] == \"MUST_LINK\",\n            )\n        # By date of update.\n        if sorted_by == ConstraintsSortOptions.DATE_OF_UPDATE:\n            return constraint_to_sort[1][\"date_of_update\"] if constraint_to_sort[1][\"date_of_update\"] is not None else 0\n        # By iteration of sampling.\n        if sorted_by == ConstraintsSortOptions.ITERATION_OF_SAMPLING:\n            return constraint_to_sort[1][\"iteration_of_sampling\"]\n        # To annotation.\n        if sorted_by == ConstraintsSortOptions.TO_ANNOTATE:\n            return constraint_to_sort[1][\"to_annotate\"] is False\n        # To review.\n        if sorted_by == ConstraintsSortOptions.TO_REVIEW:\n            return constraint_to_sort[1][\"to_review\"] is False\n        # To fix conflict.\n        #### if sorted_by == ConstraintsSortOptions.TO_FIX_CONFLICT:\n        return constraint_to_sort[1][\"to_fix_conflict\"] is False\n\n    # Sorted the constraints to return.\n    sorted_constraints: Dict[str, Any] = dict(\n        sorted(\n            constraints.items(),\n            key=get_value_for_constraints_sorting,\n            reverse=sorted_reverse,\n        )\n    )\n\n    # Return the requested constraints.\n    return {\n        \"project_id\": project_id,\n        \"constraints\": sorted_constraints,\n        # Get the request parameters.\n        \"parameters\": {\n            \"without_hidden_constraints\": without_hidden_constraints,\n            \"sorted_by\": sorted_by.value,\n            \"sorted_reverse\": sorted_reverse,\n        },\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_constraints_sampling_results","title":"<code>get_constraints_sampling_results(project_id=Path(..., description='The ID of the project.'), iteration_id=Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.'))</code>  <code>async</code>","text":"<p>Get constraints sampling results.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>iteration_id</code> <code>Optional[int]</code> <p>The ID of project iteration. If <code>None</code>, get the current iteration. Defaults to <code>None</code>.</p> <code>Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the iteration with id <code>iteration_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the status of the project hasn't completed its sampling step.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains sampling result.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/sampling\",\n    tags=[\"Constraints sampling\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_constraints_sampling_results(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    iteration_id: Optional[int] = Query(\n        None,\n        description=\"The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get constraints sampling results.\n\n    Args:\n        project_id (str, optional): The ID of the project.\n        iteration_id (Optional[int], optional): The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the iteration with id `iteration_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the status of the project hasn't completed its sampling step.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains sampling result.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load settings.\n    with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject:\n        project_settings: Dict[str, Dict[str, Any]] = json.load(settings_fileobject)\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n        project_status: Dict[str, Any] = json.load(status_fileobject)\n\n    # Get current iteration id if needed.\n    if iteration_id is None:\n        if project_status[\"iteration_id\"] == 0:\n            iteration_id = 0\n        elif (\n            project_status[\"state\"] == ICGUIStates.SAMPLING_TODO  # noqa: WPS514\n            or project_status[\"state\"] == ICGUIStates.SAMPLING_PENDING\n            or project_status[\"state\"] == ICGUIStates.SAMPLING_WORKING\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION\n            or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_ERRORS\n        ):\n            iteration_id = project_status[\"iteration_id\"] - 1\n        else:\n            iteration_id = project_status[\"iteration_id\"]\n\n    # Case of iteration `0`.\n    if iteration_id == 0:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The iteration `0` has no sampling step.\",\n        )\n\n    # Check project status.\n    if iteration_id == project_status[\"iteration_id\"] and (\n        project_status[\"state\"] == ICGUIStates.SAMPLING_TODO  # noqa: WPS514\n        or project_status[\"state\"] == ICGUIStates.SAMPLING_PENDING\n        or project_status[\"state\"] == ICGUIStates.SAMPLING_WORKING\n        or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\n        or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION\n        or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION\n        or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_ERRORS\n    ):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The project with id '{project_id_str}' hasn't completed its sampling step on iteration '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(iteration_id),\n            ),\n        )\n\n    # Otherwise check that requested iteration id exist.\n    if str(iteration_id) not in project_settings.keys():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' has no iteration with id '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(iteration_id),\n            ),\n        )\n\n    # Load the sampling results.\n    with open(DATA_DIRECTORY / project_id / \"sampling.json\", \"r\") as sampling_fileobject:\n        # Return the project sampling.\n        return {\n            \"project_id\": project_id,\n            \"iteration_id\": iteration_id,\n            \"sampling\": json.load(sampling_fileobject)[str(iteration_id)],\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_constraint_annotation_page","title":"<code>get_html_constraint_annotation_page(request, project_id=Path(..., description='The ID of the project.'), constraint_id=Path(..., description='The ID of the constraint.'))</code>  <code>async</code>","text":"<p>Get HTML constraint annotation page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>constraint_id</code> <code>str</code> <p>The ID of the constraint.</p> <code>Path(..., description='The ID of the constraint.')</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects/{project_id}/constraints/{constraint_id}\",\n    tags=[\"Constraints\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_constraint_annotation_page(\n    request: Request,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    constraint_id: str = Path(\n        ...,\n        description=\"The ID of the constraint.\",\n    ),\n) -&gt; Response:\n    \"\"\"\n    Get HTML constraint annotation page.\n\n    Args:\n        request (Request):  The request context.\n        project_id (str): The ID of the project.\n        constraint_id (str): The ID of the constraint.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML constraints page.\n    try:\n        return templates.TemplateResponse(\n            name=\"constraint_annotation.html\",\n            context={\n                \"request\": request,\n                # Get the project ID.\n                \"project_id\": project_id,\n                # Get the constraints ID.\n                \"constraint_id\": constraint_id,\n                # Get the project metadata (ID, name, creation date).\n                \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                # Get the project status (iteration, step name and status, modelization state and conflict).\n                \"status\": (await get_status(project_id=project_id))[\"status\"],\n                # Get the project texts.\n                \"texts\": (\n                    await get_texts(\n                        project_id=project_id,\n                        without_deleted_texts=False,\n                        sorted_by=TextsSortOptions.ID,\n                        sorted_reverse=False,\n                    )\n                )[\"texts\"],\n                \"texts_html_escaped\": {  # TODO: Escape HTML for javascript\n                    text_id: {  # Force HTML escape.\n                        key: (html.escape(value) if key in {\"text_original\", \"text\", \"text_preprocessed\"} else value)\n                        for key, value in text_value.items()\n                    }\n                    for text_id, text_value in (\n                        await get_texts(\n                            project_id=project_id,\n                            without_deleted_texts=False,\n                            sorted_by=TextsSortOptions.ID,\n                            sorted_reverse=False,\n                        )\n                    )[\"texts\"].items()\n                },\n                # Get the project constraints.\n                \"constraints\": (\n                    await get_constraints(\n                        project_id=project_id,\n                        without_hidden_constraints=False,\n                        sorted_by=ConstraintsSortOptions.ITERATION_OF_SAMPLING,\n                        sorted_reverse=False,\n                    )\n                )[\"constraints\"],\n                # Get the project clustering result.\n                \"clusters\": (await get_constrained_clustering_results(project_id=project_id, iteration_id=None))[\n                    \"clustering\"\n                ],\n                # Get the project modelization inference result.\n                \"modelization\": (await get_modelization(project_id=project_id))[\"modelization\"],\n            },\n            status_code=status.HTTP_200_OK,\n        )\n\n    # Case of error: Return HTML error page.\n    except HTTPException as error:\n        # Return HTML error page.\n        return templates.TemplateResponse(\n            name=\"error.html\",\n            context={\n                \"request\": request,\n                \"status_code\": error.status_code,\n                \"detail\": error.detail,\n            },\n            status_code=error.status_code,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_constraints_page","title":"<code>get_html_constraints_page(request, project_id=Path(..., description='The ID of the project.'), sorted_by=Query(ConstraintsSortOptions.ITERATION_OF_SAMPLING, description='The option to sort constraints. Defaults to `ITERATION_OF_SAMPLING`.'), sorted_reverse=Query(False, description='The option to reverse constraints order. Defaults to `False`.'))</code>  <code>async</code>","text":"<p>Get HTML constraints page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>sorted_by</code> <code>ConstraintsSortOptions</code> <p>The option to sort constraints. Defaults to <code>ITERATION_OF_SAMPLING</code>.</p> <code>Query(ITERATION_OF_SAMPLING, description='The option to sort constraints. Defaults to `ITERATION_OF_SAMPLING`.')</code> <code>sorted_reverse</code> <code>bool</code> <p>The option to reverse constraints order. Defaults to <code>False</code>.</p> <code>Query(False, description='The option to reverse constraints order. Defaults to `False`.')</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects/{project_id}/constraints\",\n    tags=[\"Constraints\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_constraints_page(\n    request: Request,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    sorted_by: ConstraintsSortOptions = Query(\n        ConstraintsSortOptions.ITERATION_OF_SAMPLING,\n        description=\"The option to sort constraints. Defaults to `ITERATION_OF_SAMPLING`.\",\n    ),\n    sorted_reverse: bool = Query(\n        False,\n        description=\"The option to reverse constraints order. Defaults to `False`.\",\n    ),\n    # TODO: filter_text\n    # TODO: limit_size + offset\n) -&gt; Response:\n    \"\"\"\n    Get HTML constraints page.\n\n    Args:\n        request (Request): The request context.\n        project_id (str): The ID of the project.\n        sorted_by (ConstraintsSortOptions, optional): The option to sort constraints. Defaults to `ITERATION_OF_SAMPLING`.\n        sorted_reverse (bool, optional): The option to reverse constraints order. Defaults to `False`.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML constraints page.\n    try:\n        return templates.TemplateResponse(\n            name=\"constraints.html\",\n            context={\n                \"request\": request,\n                # Get the project ID.\n                \"project_id\": project_id,\n                # Get the request parameters.\n                \"parameters\": {\n                    \"without_hidden_constraints\": True,\n                    \"sorted_by\": sorted_by.value,\n                    \"sorted_reverse\": sorted_reverse,\n                },\n                # Get the project metadata (ID, name, creation date).\n                \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                # Get the project status (iteration, step name and status, modelization state and conflict).\n                \"status\": (await get_status(project_id=project_id))[\"status\"],\n                # Get the project texts.\n                \"texts\": (\n                    await get_texts(\n                        project_id=project_id,\n                        without_deleted_texts=False,\n                        sorted_by=TextsSortOptions.ID,\n                        sorted_reverse=False,\n                    )\n                )[\"texts\"],\n                # Get the project constraints.\n                \"constraints\": (\n                    await get_constraints(\n                        project_id=project_id,\n                        without_hidden_constraints=True,\n                        sorted_by=sorted_by,\n                        sorted_reverse=sorted_reverse,\n                    )\n                )[\"constraints\"],\n            },\n            status_code=status.HTTP_200_OK,\n        )\n\n    # Case of error: Return HTML error page.\n    except HTTPException as error:\n        # Return HTML error page.\n        return templates.TemplateResponse(\n            name=\"error.html\",\n            context={\n                \"request\": request,\n                \"status_code\": error.status_code,\n                \"detail\": error.detail,\n            },\n            status_code=error.status_code,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_help_page","title":"<code>get_html_help_page(request)</code>  <code>async</code>","text":"<p>Get HTML help page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/help\",\n    tags=[\"Home and Documentation\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_help_page(\n    request: Request,\n) -&gt; Response:\n    \"\"\"\n    Get HTML help page.\n\n    Args:\n        request (Request): The request context.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML help page.\n    return templates.TemplateResponse(\n        name=\"help.html\",\n        context={\n            \"request\": request,\n        },\n        status_code=status.HTTP_200_OK,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_project_home_page","title":"<code>get_html_project_home_page(request, project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Get HTML project home page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects/{project_id}\",\n    tags=[\"Projects\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_project_home_page(\n    request: Request,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Response:\n    \"\"\"\n    Get HTML project home page.\n\n    Args:\n        request (Request): The request context.\n        project_id (str): The ID of the project.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML project home page.\n    try:\n        return templates.TemplateResponse(\n            name=\"project_home.html\",\n            context={\n                \"request\": request,\n                # Get the project ID.\n                \"project_id\": project_id,\n                # Get the project metadata (ID, name, creation date).\n                \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                # Get the project status (iteration, step name and status, modelization state and conflict).\n                \"status\": (await get_status(project_id=project_id))[\"status\"],\n                # Get the project constraints.\n                \"constraints\": (\n                    await get_constraints(\n                        project_id=project_id,\n                        without_hidden_constraints=True,\n                        sorted_by=ConstraintsSortOptions.ITERATION_OF_SAMPLING,\n                        sorted_reverse=False,\n                    )\n                )[\"constraints\"],\n            },\n            status_code=status.HTTP_200_OK,\n        )\n\n    # Case of error: Return HTML error page.\n    except HTTPException as error:\n        # Return HTML error page.\n        return templates.TemplateResponse(\n            name=\"error.html\",\n            context={\n                \"request\": request,\n                \"status_code\": error.status_code,\n                \"detail\": error.detail,\n            },\n            status_code=error.status_code,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_projects_listing_or_creation_page","title":"<code>get_html_projects_listing_or_creation_page(request)</code>  <code>async</code>","text":"<p>Get HTML projects listing or creation page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects\",\n    tags=[\"Projects\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_projects_listing_or_creation_page(\n    request: Request,\n) -&gt; Response:\n    \"\"\"\n    Get HTML projects listing or creation page.\n\n    Args:\n        request (Request): The request context.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML projects listing and creation page.\n    return templates.TemplateResponse(\n        name=\"projects_listing.html\",\n        context={\n            \"request\": request,\n            # Get projects and their description.\n            \"projects\": {\n                project_id: {\n                    \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                    \"status\": (await get_status(project_id=project_id))[\"status\"],\n                }\n                for project_id in (await get_projects())\n            },\n        },\n        status_code=status.HTTP_200_OK,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_settings_page","title":"<code>get_html_settings_page(request, project_id=Path(..., description='The ID of the project.'), iteration_id=Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.'), settings_names=Query([ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING], description='The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.'))</code>  <code>async</code>","text":"<p>Get HTML settings page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>iteration_id</code> <code>Optional[int]</code> <p>The ID of project iteration. If <code>None</code>, get the current iteration. Defaults to <code>None</code>.</p> <code>Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.')</code> <code>settings_names</code> <code>List[ICGUISettings]</code> <p>The list of names of requested settings to return. Defaults to <code>[ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING,]</code>.</p> <code>Query([PREPROCESSING, VECTORIZATION, SAMPLING, CLUSTERING], description='The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.')</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects/{project_id}/settings\",\n    tags=[\"Settings\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_settings_page(\n    request: Request,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    iteration_id: Optional[int] = Query(\n        None,\n        description=\"The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\",\n    ),\n    settings_names: List[ICGUISettings] = Query(\n        [\n            ICGUISettings.PREPROCESSING,\n            ICGUISettings.VECTORIZATION,\n            ICGUISettings.SAMPLING,\n            ICGUISettings.CLUSTERING,\n        ],\n        description=\"The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.\",\n    ),\n) -&gt; Response:\n    \"\"\"\n    Get HTML settings page.\n\n    Args:\n        request (Request): The request context.\n        project_id (str): The ID of the project.\n        iteration_id (Optional[int], optional): The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\n        settings_names (List[ICGUISettings], optional): The list of names of requested settings to return. Defaults to `[ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING,]`.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML project home page.\n    try:  # noqa: WPS229 (too long try body)\n        project_status: Dict[str, Any] = (await get_status(project_id=project_id))[\"status\"]\n        if iteration_id is None:\n            iteration_id = project_status[\"iteration_id\"]\n\n        return templates.TemplateResponse(\n            name=\"settings.html\",\n            context={\n                \"request\": request,\n                # Get the project ID.\n                \"project_id\": project_id,\n                # Get the iteration ID.\n                \"iteration_id\": iteration_id,\n                # Get the request parameters.\n                \"parameters\": {\n                    \"settings_names\": [settings_name.value for settings_name in settings_names],\n                },\n                # Get the project metadata (ID, name, creation date).\n                \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                # Get the project status (iteration, step name and status, modelization state and conflict).\n                \"status\": project_status,\n                # Get the project settings (preprocessing, vectorization, sampling, clustering).\n                \"settings\": (\n                    await get_settings(project_id=project_id, iteration_id=iteration_id, settings_names=settings_names)\n                )[\"settings\"],\n                # Get navigation information.\n                \"navigation\": {\n                    \"previous\": (None if (iteration_id == 0) else iteration_id - 1),\n                    \"next\": (None if (iteration_id == project_status[\"iteration_id\"]) else (iteration_id + 1)),\n                },\n            },\n            status_code=status.HTTP_200_OK,\n        )\n\n    # Case of error: Return HTML error page.\n    except HTTPException as error:\n        # Return HTML error page.\n        return templates.TemplateResponse(\n            name=\"error.html\",\n            context={\n                \"request\": request,\n                \"status_code\": error.status_code,\n                \"detail\": error.detail,\n            },\n            status_code=error.status_code,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_texts_page","title":"<code>get_html_texts_page(request, project_id=Path(..., description='The ID of the project.'), sorted_by=Query(TextsSortOptions.ALPHABETICAL, description='The option to sort texts. Defaults to `ALPHABETICAL`.'), sorted_reverse=Query(False, description='The option to reverse texts order. Defaults to `False`.'))</code>  <code>async</code>","text":"<p>Get HTML texts page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>sorted_by</code> <code>TextsSortOptions</code> <p>The option to sort texts. Defaults to <code>ALPHABETICAL</code>.</p> <code>Query(ALPHABETICAL, description='The option to sort texts. Defaults to `ALPHABETICAL`.')</code> <code>sorted_reverse</code> <code>bool</code> <p>The option to reverse texts order. Defaults to <code>False</code>.</p> <code>Query(False, description='The option to reverse texts order. Defaults to `False`.')</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/gui/projects/{project_id}/texts\",\n    tags=[\"Texts\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_texts_page(\n    request: Request,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    sorted_by: TextsSortOptions = Query(\n        TextsSortOptions.ALPHABETICAL,\n        description=\"The option to sort texts. Defaults to `ALPHABETICAL`.\",\n    ),\n    sorted_reverse: bool = Query(\n        False,\n        description=\"The option to reverse texts order. Defaults to `False`.\",\n    ),\n    # TODO: filter_text\n    # TODO: limit_size + offset\n) -&gt; Response:\n    \"\"\"\n    Get HTML texts page.\n\n    Args:\n        request (Request): The request context.\n        project_id (str): The ID of the project.\n        sorted_by (TextsSortOptions, optional): The option to sort texts. Defaults to `ALPHABETICAL`.\n        sorted_reverse (bool, optional): The option to reverse texts order. Defaults to `False`.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML constraints page.\n    try:\n        return templates.TemplateResponse(\n            name=\"texts.html\",\n            context={\n                \"request\": request,\n                # Get the project ID.\n                \"project_id\": project_id,\n                # Get the request parameters.\n                \"parameters\": {\n                    \"without_deleted_texts\": True,\n                    \"sorted_by\": sorted_by.value,\n                    \"sorted_reverse\": sorted_reverse,\n                },\n                # Get the project metadata (ID, name, creation date).\n                \"metadata\": (await get_metadata(project_id=project_id))[\"metadata\"],\n                # Get the project status (iteration, step name and status, modelization state and conflict).\n                \"status\": (await get_status(project_id=project_id))[\"status\"],\n                # Get the project texts.\n                \"texts\": (\n                    await get_texts(\n                        project_id=project_id,\n                        without_deleted_texts=False,\n                        sorted_by=TextsSortOptions.ID,\n                        sorted_reverse=False,\n                    )\n                )[\"texts\"],\n                # Get the project constraints.\n                \"constraints\": (\n                    await get_constraints(\n                        project_id=project_id,\n                        without_hidden_constraints=True,\n                        sorted_by=ConstraintsSortOptions.ID,\n                        sorted_reverse=False,\n                    )\n                )[\"constraints\"],\n            },\n            status_code=status.HTTP_200_OK,\n        )\n\n    # Case of error: Return HTML error page.\n    except HTTPException as error:\n        # Return HTML error page.\n        return templates.TemplateResponse(\n            name=\"error.html\",\n            context={\n                \"request\": request,\n                \"status_code\": error.status_code,\n                \"detail\": error.detail,\n            },\n            status_code=error.status_code,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_html_welcome_page","title":"<code>get_html_welcome_page(request)</code>  <code>async</code>","text":"<p>Define HTML welcome page.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request context.</p> required <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The requested page.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/\",\n    tags=[\"Home and Documentation\"],\n    response_class=Response,\n    status_code=status.HTTP_200_OK,\n)\nasync def get_html_welcome_page(\n    request: Request,\n) -&gt; Response:\n    \"\"\"\n    Define HTML welcome page.\n\n    Args:\n        request (Request): The request context.\n\n    Returns:\n        Response: The requested page.\n    \"\"\"\n\n    # Return HTML welcome page.\n    return templates.TemplateResponse(\n        name=\"welcome.html\",\n        context={\n            \"request\": request,\n        },\n        status_code=status.HTTP_200_OK,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_metadata","title":"<code>get_metadata(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Get metadata.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains metadata.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/metadata\",\n    tags=[\"Projects\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_metadata(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get metadata.\n\n    Args:\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains metadata.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load the project metadata.\n    with open(DATA_DIRECTORY / project_id / \"metadata.json\", \"r\") as metadata_fileobject:\n        # Return the project metadata.\n        return {\n            \"project_id\": project_id,\n            \"metadata\": json.load(metadata_fileobject),\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_modelization","title":"<code>get_modelization(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Get modelization inference.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains modelization inference result.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/modelization\",\n    tags=[\"Data modelization\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_modelization(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get modelization inference.\n\n    Args:\n        project_id (str, optional): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains modelization inference result.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load the modelization inference results.\n    with open(DATA_DIRECTORY / project_id / \"modelization.json\", \"r\") as modelization_fileobject:\n        # Return the project modelization inference.\n        return {\n            \"project_id\": project_id,\n            \"modelization\": json.load(modelization_fileobject),\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_next_key","title":"<code>get_next_key(key, dictionary)</code>","text":"<p>Get next key in a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The current key.</p> required <code>dictionary</code> <code>Dict[str, Any]</code> <p>The dictionary.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The next key.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>def get_next_key(key: str, dictionary: Dict[str, Any]) -&gt; Optional[str]:\n    \"\"\"\n    Get next key in a dictionary.\n\n    Args:\n        key (str): The current key.\n        dictionary (Dict[str, Any]): The dictionary.\n\n    Returns:\n        Optional[str]: The next key.\n    \"\"\"\n    list_of_keys: List[str] = list(dictionary.keys())\n    if key in list_of_keys:\n        next_key_index: int = list_of_keys.index(key) + 1\n        return list_of_keys[next_key_index] if next_key_index &lt; len(list_of_keys) else None\n    return None\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_previous_key","title":"<code>get_previous_key(key, dictionary)</code>","text":"<p>Get previous key in a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The current key.</p> required <code>dictionary</code> <code>Dict[str, Any]</code> <p>The dictionary.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The previous key.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>def get_previous_key(key: str, dictionary: Dict[str, Any]) -&gt; Optional[str]:\n    \"\"\"\n    Get previous key in a dictionary.\n\n    Args:\n        key (str): The current key.\n        dictionary (Dict[str, Any]): The dictionary.\n\n    Returns:\n        Optional[str]: The previous key.\n    \"\"\"\n    list_of_keys: List[str] = list(dictionary.keys())\n    if key in list_of_keys:\n        previous_key_index: int = list_of_keys.index(key) - 1\n        return list_of_keys[previous_key_index] if 0 &lt;= previous_key_index else None\n    return None\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_projects","title":"<code>get_projects()</code>  <code>async</code>","text":"<p>Get the list of existing project IDs. (A project is represented by a subfolder in <code>.data</code> folder.)</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The list of existing project IDs.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects\",\n    tags=[\"Projects\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_projects() -&gt; List[str]:\n    \"\"\"\n    Get the list of existing project IDs.\n    (A project is represented by a subfolder in `.data` folder.)\n\n    Returns:\n        List[str]: The list of existing project IDs.\n    \"\"\"\n\n    # Return the list of project IDs.\n    return [project_id for project_id in os.listdir(DATA_DIRECTORY) if os.path.isdir(DATA_DIRECTORY / project_id)]\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_settings","title":"<code>get_settings(project_id=Path(..., description='The ID of the project.'), iteration_id=Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.'), settings_names=Query([ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING], description='The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.'))</code>  <code>async</code>","text":"<p>Get settings.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>iteration_id</code> <code>Optional[int]</code> <p>The ID of project iteration. If <code>None</code>, get the current iteration. Defaults to <code>None</code>.</p> <code>Query(None, description='The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.')</code> <code>settings_names</code> <code>List[ICGUISettings]</code> <p>The list of names of requested settings to return. Defaults to <code>[ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING,]</code>.</p> <code>Query([PREPROCESSING, VECTORIZATION, SAMPLING, CLUSTERING], description='The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the iteration with id <code>iteration_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/settings\",\n    tags=[\"Settings\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_settings(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    iteration_id: Optional[int] = Query(\n        None,\n        description=\"The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\",\n    ),\n    settings_names: List[ICGUISettings] = Query(\n        [\n            ICGUISettings.PREPROCESSING,\n            ICGUISettings.VECTORIZATION,\n            ICGUISettings.SAMPLING,\n            ICGUISettings.CLUSTERING,\n        ],\n        description=\"The list of names of requested settings to return. To select multiple settings kinds, use `CTRL + clic`.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get settings.\n\n    Args:\n        project_id (str): The ID of the project.\n        iteration_id (Optional[int], optional): The ID of project iteration. If `None`, get the current iteration. Defaults to `None`.\n        settings_names (List[ICGUISettings], optional): The list of names of requested settings to return. Defaults to `[ICGUISettings.PREPROCESSING, ICGUISettings.VECTORIZATION, ICGUISettings.SAMPLING, ICGUISettings.CLUSTERING,]`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the iteration with id `iteration_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains settings.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load settings.\n    with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject:\n        project_settings: Dict[str, Dict[str, Any]] = json.load(settings_fileobject)\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n        project_status: Dict[str, Any] = json.load(status_fileobject)\n\n    # Get current iteration id if needed.\n    if iteration_id is None:\n        iteration_id = project_status[\"iteration_id\"]\n\n    # Otherwise check that requested iteration id exist.\n    if str(iteration_id) not in project_settings.keys():\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' has no iteration with id '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(iteration_id),\n            ),\n        )\n\n    # Return the requested settings.\n    return {\n        # Get the project ID.\n        \"project_id\": project_id,\n        # Get the iteration ID.\n        \"iteration_id\": iteration_id,\n        # Get the request parameters.\n        \"parameters\": {\n            \"settings_names\": [settings_name.value for settings_name in settings_names],\n        },\n        # Get the settings.\n        \"settings\": {\n            setting_name: settings_value\n            for setting_name, settings_value in project_settings[str(iteration_id)].items()\n            if setting_name in settings_names\n        },\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_status","title":"<code>get_status(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Get status.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains status.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/status\",\n    tags=[\"Status\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_status(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get status.\n\n    Args:\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains status.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n        project_status: Dict[str, Any] = json.load(status_fileobject)\n        project_status[\"state_details\"] = get_ICGUIStates_details(state=project_status[\"state\"])\n\n        # Return the requested status.\n        return {\"project_id\": project_id, \"status\": project_status}\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_texts","title":"<code>get_texts(project_id=Path(..., description='The ID of the project.'), without_deleted_texts=Query(True, description='The option to not return deleted texts. Defaults to `True`.'), sorted_by=Query(TextsSortOptions.ALPHABETICAL, description='The option to sort texts. Defaults to `ALPHABETICAL`.'), sorted_reverse=Query(False, description='The option to reverse texts order. Defaults to `False`.'))</code>  <code>async</code>","text":"<p>Get texts.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>without_deleted_texts</code> <code>bool</code> <p>The option to not return deleted texts. Defaults to <code>True</code>.</p> <code>Query(True, description='The option to not return deleted texts. Defaults to `True`.')</code> <code>sorted_by</code> <code>TextsSortOptions</code> <p>The option to sort texts. Defaults to <code>ALPHABETICAL</code>.</p> <code>Query(ALPHABETICAL, description='The option to sort texts. Defaults to `ALPHABETICAL`.')</code> <code>sorted_reverse</code> <code>bool</code> <p>The option to reverse texts order. Defaults to <code>False</code>.</p> <code>Query(False, description='The option to reverse texts order. Defaults to `False`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains texts.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/texts\",\n    tags=[\"Texts\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_texts(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    without_deleted_texts: bool = Query(\n        True,\n        description=\"The option to not return deleted texts. Defaults to `True`.\",\n    ),\n    sorted_by: TextsSortOptions = Query(\n        TextsSortOptions.ALPHABETICAL,\n        description=\"The option to sort texts. Defaults to `ALPHABETICAL`.\",\n    ),\n    sorted_reverse: bool = Query(\n        False,\n        description=\"The option to reverse texts order. Defaults to `False`.\",\n    ),\n    # TODO: filter_text\n    # TODO: limit_size + offset\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get texts.\n\n    Args:\n        project_id (str): The ID of the project.\n        without_deleted_texts (bool): The option to not return deleted texts. Defaults to `True`.\n        sorted_by (TextsSortOptions, optional): The option to sort texts. Defaults to `ALPHABETICAL`.\n        sorted_reverse (bool, optional): The option to reverse texts order. Defaults to `False`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains texts.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    ###\n    ### Load needed data.\n    ###\n\n    # Load texts.\n    with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject:\n        texts: Dict[str, Any] = {\n            text_id: text_value\n            for text_id, text_value in json.load(texts_fileobject).items()\n            if (without_deleted_texts is False or text_value[\"is_deleted\"] is False)\n        }\n\n    ###\n    ### Sort texts.\n    ###\n\n    # Define the values selection method.\n    def get_value_for_texts_sorting(text_to_sort: Tuple[str, Dict[str, Any]]) -&gt; Any:  # noqa: WPS430 (nested function)\n        \"\"\"Return the values expected for texts sorting.\n\n        Args:\n            text_to_sort (Tuple[Dict[str, Any]]): A text (from `.items()`).\n\n        Returns:\n            Any: The expected values of the text need for the sort.\n        \"\"\"\n        # By text id.\n        if sorted_by == TextsSortOptions.ID:\n            return text_to_sort[0]\n        # By text value.\n        if sorted_by == TextsSortOptions.ALPHABETICAL:\n            return text_to_sort[1][\"text_preprocessed\"]\n        # By deletion status.\n        #### if sorted_by == TextsSortOptions.IS_DELETED:\n        return text_to_sort[1][\"is_deleted\"]\n\n    # Sorted the texts to return.\n    sorted_texts: Dict[str, Any] = dict(\n        sorted(\n            texts.items(),\n            key=get_value_for_texts_sorting,\n            reverse=sorted_reverse,\n        )\n    )\n\n    # Return the requested texts.\n    return {\n        \"project_id\": project_id,\n        \"texts\": sorted_texts,\n        # Get the request parameters.\n        \"parameters\": {\n            \"without_deleted_texts\": without_deleted_texts,\n            \"sorted_by\": sorted_by.value,\n            \"sorted_reverse\": sorted_reverse,\n        },\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.get_vectors","title":"<code>get_vectors(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Get 2D and 3D vectors.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the iteration with id <code>iteration_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the status of the project hasn't completed its clustering step.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains clustering result.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/api/projects/{project_id}/vectors\",\n    tags=[\"Data modelization\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def get_vectors(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get 2D and 3D vectors.\n\n    Args:\n        project_id (str, optional): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the iteration with id `iteration_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the status of the project hasn't completed its clustering step.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains clustering result.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n        project_status: Dict[str, Any] = json.load(status_fileobject)\n\n    # Check project status.\n    if (\n        project_status[\"state\"] != ICGUIStates.SAMPLING_TODO  # noqa: WPS514\n        and project_status[\"state\"] != ICGUIStates.SAMPLING_PENDING\n        and project_status[\"state\"] != ICGUIStates.SAMPLING_WORKING\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS\n        and project_status[\"state\"] != ICGUIStates.CLUSTERING_TODO\n        and project_status[\"state\"] != ICGUIStates.CLUSTERING_PENDING\n        and project_status[\"state\"] != ICGUIStates.CLUSTERING_WORKING\n        and project_status[\"state\"] != ICGUIStates.ITERATION_END\n    ):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The project with id '{project_id_str}' hasn't completed its modelization update step.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Load the 2D vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors_2D.json\", \"r\") as vectors_2D_fileobject:\n        vectors_2D: Dict[str, Dict[str, float]] = json.load(vectors_2D_fileobject)  # noqa: S301  # Usage of Pickle\n\n    # Load the 3D vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors_3D.json\", \"r\") as vectors_3D_fileobject:\n        vectors_3D: Dict[str, Dict[str, float]] = json.load(vectors_3D_fileobject)  # noqa: S301  # Usage of Pickle\n\n        # Return the project vectors.\n        return {\n            \"project_id\": project_id,\n            \"vectors_2d\": vectors_2D,\n            \"vectors_3d\": vectors_3D,\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.import_project","title":"<code>import_project(background_tasks, project_archive=File(..., description='A zip archive representing a project. Use format from `download` route.'))</code>  <code>async</code>","text":"<p>Import a project from a zip archive file.</p> <p>Parameters:</p> Name Type Description Default <code>background_tasks</code> <code>BackgroundTasks</code> <p>A background task to run after the return statement.</p> required <code>project_archive</code> <code>UploadFile</code> <p>A zip archive representing a project. Use format from <code>download</code> route.</p> <code>File(..., description='A zip archive representing a project. Use format from `download` route.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_400_NOT_FOUND</code> if archive is invalid.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of the imported project.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects\",\n    tags=[\"Projects\"],\n    status_code=status.HTTP_201_CREATED,\n)\nasync def import_project(\n    background_tasks: BackgroundTasks,\n    project_archive: UploadFile = File(\n        ...,\n        description=\"A zip archive representing a project. Use format from `download` route.\",\n        # TODO: max_size=\"8MB\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Import a project from a zip archive file.\n\n    Args:\n        background_tasks (BackgroundTasks): A background task to run after the return statement.\n        project_archive (UploadFile, optional): A zip archive representing a project. Use format from `download` route.\n\n    Raises:\n        HTTPException: Raises `HTTP_400_NOT_FOUND` if archive is invalid.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of the imported project.\n    \"\"\"\n\n    # Check archive type.\n    if project_archive.content_type != \"application/x-zip-compressed\":\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"The file type '{project_archive_type}' is not supported. Please use '.zip' file.\".format(\n                project_archive_type=str(project_archive.content_type),\n            ),\n        )\n\n    # Temporarly store zip archive.\n    current_timestamp: float = datetime.now().timestamp()\n    new_current_project_id: str = str(int(current_timestamp * 10**6))\n    import_archive_name: str = \"import-{new_current_project_id_str}.zip\".format(\n        new_current_project_id_str=str(new_current_project_id)\n    )\n    import_archive_path: pathlib.Path = DATA_DIRECTORY / import_archive_name\n    with open(import_archive_path, \"wb\") as import_archive_fileobject_w:\n        shutil.copyfileobj(project_archive.file, import_archive_fileobject_w)\n\n    # Define a backgroundtask to clear archive after importation.\n    def clear_after_import_project():  # noqa: WPS430 (nested function)\n        \"\"\"\n        Delete the archive file.\n        \"\"\"\n\n        # Delete archive file.\n        if os.path.exists(import_archive_path):  # pragma: no cover\n            os.remove(import_archive_path)\n\n    # Add the background task.\n    background_tasks.add_task(\n        func=clear_after_import_project,\n    )\n\n    # Try to open archive file.\n    try:\n        with zipfile.ZipFile(import_archive_path, \"r\") as import_archive_file:\n            ###\n            ### Check archive content.\n            ###\n            missing_files: List[str] = [\n                needed_file\n                for needed_file in (\n                    \"metadata.json\",\n                    \"status.json\",\n                    \"texts.json\",\n                    \"constraints.json\",\n                    \"settings.json\",\n                    \"sampling.json\",\n                    \"clustering.json\",\n                    \"modelization.json\",  # Will be recomputed during modelization step.\n                    # \"vectors_2D.json\",  # Will be recomputed during modelization step.\n                    # \"vectors_3D.json\",  # Will be recomputed during modelization step.\n                )\n                if needed_file not in import_archive_file.namelist()\n            ]\n            if len(missing_files) != 0:  # noqa: WPS507\n                raise ValueError(\n                    \"The project archive file doesn't contains the following files: {missing_files_str}.\".format(\n                        missing_files_str=str(missing_files),\n                    )\n                )\n\n            ###\n            ### Check `metadata.json`.\n            ###\n            with import_archive_file.open(\"metadata.json\") as metadata_fileobject_r:\n                metadata: Dict[str, Any] = json.load(metadata_fileobject_r)\n            metadata[\"project_id\"] = new_current_project_id\n            if (\n                \"project_name\" not in metadata.keys()\n                or not isinstance(metadata[\"project_name\"], str)\n                or \"creation_timestamp\" not in metadata.keys()\n                or not isinstance(metadata[\"creation_timestamp\"], float)\n            ):\n                raise ValueError(\"The project archive file has an invalid `metadata.json` file.\")\n\n            ###\n            ### Check `status.json`.\n            ###\n            with import_archive_file.open(\"status.json\") as status_fileobject_r:\n                project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n            # Check `status.state`.\n            if \"state\" not in project_status.keys():\n                raise ValueError(\"The project archive file has an invalid `status.json` file (see key `state`).\")\n\n            # Force `status.state` - Case of initialization.\n            if (\n                project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION  # noqa: WPS514\n                or project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITH_PENDING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITH_WORKING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITH_ERRORS\n            ):\n                project_status[\"state\"] = ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION\n            # Force `status.state` - Case of sampling.\n            elif (\n                project_status[\"state\"] == ICGUIStates.SAMPLING_TODO  # noqa: WPS514\n                or project_status[\"state\"] == ICGUIStates.SAMPLING_PENDING\n                or project_status[\"state\"] == ICGUIStates.SAMPLING_WORKING\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_ERRORS\n            ):\n                project_status[\"state\"] = ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\n            # Force `status.state` - Case of annotation.\n            elif (\n                project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION  # noqa: WPS514\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION\n            ):\n                project_status[\"state\"] = ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION\n            # Force `status.state` - Case of clustering.\n            elif (\n                project_status[\"state\"] == ICGUIStates.CLUSTERING_TODO  # noqa: WPS514\n                or project_status[\"state\"] == ICGUIStates.CLUSTERING_PENDING\n                or project_status[\"state\"] == ICGUIStates.CLUSTERING_WORKING\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_ERRORS\n            ):\n                project_status[\"state\"] = ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION\n            # Force `status.state` - Case of iteration end.\n            elif (\n                project_status[\"state\"] == ICGUIStates.ITERATION_END  # noqa: WPS514\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION\n                or project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_ERRORS\n            ):\n                project_status[\"state\"] = ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\n            # Force `state` - Case of unknown state.\n            else:\n                raise ValueError(\"The project archive file has an invalid `status.json` file (see key `state`).\")\n\n            # Force `status.task`.\n            project_status[\"task\"] = None\n\n            # TODO: Check `texts.json`.\n            with import_archive_file.open(\"texts.json\") as texts_fileobject_r:\n                texts: Dict[str, Dict[str, Any]] = json.load(texts_fileobject_r)\n\n            # TODO: Check `constraints.json`.\n            with import_archive_file.open(\"constraints.json\") as constraints_fileobject_r:\n                constraints: Dict[str, Dict[str, Any]] = json.load(constraints_fileobject_r)\n\n            # TODO: Check `settings.json`.\n            with import_archive_file.open(\"settings.json\") as settings_fileobject_r:\n                settings: Dict[str, Dict[str, Any]] = json.load(settings_fileobject_r)\n\n            # TODO: Check `sampling.json`.\n            with import_archive_file.open(\"sampling.json\") as sampling_fileobject_r:\n                sampling: Dict[str, List[str]] = json.load(sampling_fileobject_r)\n\n            # TODO: Check `clustering.json`.\n            with import_archive_file.open(\"clustering.json\") as clustering_fileobject_r:\n                clustering: Dict[str, Dict[str, str]] = json.load(clustering_fileobject_r)\n\n            # TODO: Check `modelization.json`.\n            with import_archive_file.open(\"modelization.json\") as modelization_fileobject_r:\n                modelization: Dict[str, Dict[str, Any]] = json.load(modelization_fileobject_r)\n\n    # Error: case of custom raised errors.\n    except ValueError as value_error:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(value_error),\n        )\n\n    # Error: other raised errors.\n    except Exception:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"An error occurs in project import. Project archive is probably invalid.\",\n        )\n\n    # Create the directory and subdirectories of the new project.\n    os.mkdir(DATA_DIRECTORY / metadata[\"project_id\"])\n\n    # Store `metadata.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"metadata.json\", \"w\") as metadata_fileobject_w:\n        json.dump(metadata, metadata_fileobject_w, indent=4)\n\n    # Store `status.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"status.json\", \"w\") as status_fileobject_w:\n        json.dump(project_status, status_fileobject_w, indent=4)\n\n    # Store `texts.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"texts.json\", \"w\") as texts_fileobject_w:\n        json.dump(texts, texts_fileobject_w, indent=4)\n\n    # Store `constraints.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"constraints.json\", \"w\") as constraints_fileobject_w:\n        json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Store `settings.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"settings.json\", \"w\") as settings_fileobject_w:\n        json.dump(settings, settings_fileobject_w, indent=4)\n\n    # Store `sampling.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"sampling.json\", \"w\") as sampling_fileobject_w:\n        json.dump(sampling, sampling_fileobject_w, indent=4)\n\n    # Store `clustering.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"clustering.json\", \"w\") as clustering_fileobject_w:\n        json.dump(clustering, clustering_fileobject_w, indent=4)\n\n    # Store `modelization.json`.\n    with open(DATA_DIRECTORY / metadata[\"project_id\"] / \"modelization.json\", \"w\") as modelization_fileobject_w:\n        json.dump(modelization, modelization_fileobject_w, indent=4)\n\n    # Return the new ID of the imported project.\n    return {\n        \"project_id\": metadata[\"project_id\"],\n        \"detail\": \"The project with name '{project_name_str}' has been imported. It has the id '{project_id_str}'.\".format(\n            project_name_str=str(metadata[\"project_name\"]),\n            project_id_str=str(metadata[\"project_id\"]),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.move_to_next_iteration","title":"<code>move_to_next_iteration(project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Move to next iteration after clustering step.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the project didn't complete its clustering step.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of the new iteration.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects/{project_id}/iterations\",\n    tags=[\"Status\"],\n    status_code=status.HTTP_201_CREATED,\n)\nasync def move_to_next_iteration(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move to next iteration after clustering step.\n\n    Args:\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the project didn't complete its clustering step.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of the new iteration.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n            project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n        # Load settings file.\n        with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject_r:\n            project_settings: Dict[str, Any] = json.load(settings_fileobject_r)\n\n        # Get current iteration id.\n        current_iteration_id: int = project_status[\"iteration_id\"]\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check project status.\n        if project_status[\"state\"] != ICGUIStates.ITERATION_END:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' hasn't completed its clustering step on iteration '{iteration_id_str}'.\".format(\n                    project_id_str=str(project_id),\n                    iteration_id_str=str(current_iteration_id),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Define new iteration id.\n        new_iteration_id: int = current_iteration_id + 1\n\n        # Initialize status for the new iteration.\n        project_status[\"iteration_id\"] = new_iteration_id\n        project_status[\"state\"] = ICGUIStates.SAMPLING_TODO\n\n        # Initialize settings for the new iteration.\n        project_settings[str(new_iteration_id)] = {\n            \"sampling\": (\n                default_SamplingSettingsModel().to_dict()\n                if (current_iteration_id == 0)\n                else project_settings[str(current_iteration_id)][\"sampling\"]\n            ),\n            \"preprocessing\": project_settings[str(current_iteration_id)][\"preprocessing\"],\n            \"vectorization\": project_settings[str(current_iteration_id)][\"vectorization\"],\n            \"clustering\": project_settings[str(current_iteration_id)][\"clustering\"],\n        }\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store project settings.\n        with open(DATA_DIRECTORY / project_id / \"settings.json\", \"w\") as settings_fileobject_w:\n            json.dump(project_settings, settings_fileobject_w, indent=4)\n\n        # Store project status.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Return the new iteration id.\n        return {\n            \"project_id\": project_id,\n            \"iteration_id\": new_iteration_id,\n            \"detail\": \"The project with id '{project_id_str}' is now on iteration with id '{iteration_id_str}'.\".format(\n                project_id_str=str(project_id),\n                iteration_id_str=str(new_iteration_id),\n            ),\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.prepare_constrained_clustering_task","title":"<code>prepare_constrained_clustering_task(background_tasks, project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Prepare constrained clustering task.</p> <p>Parameters:</p> Name Type Description Default <code>background_tasks</code> <code>BackgroundTasks</code> <p>A background task to run after the return statement.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow the preparation of constrained clustering task.</p> <code>HTTPException</code> <p>Raises <code>HTTP_504_GATEWAY_TIMEOUT</code> if the task can't be prepared.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the confirmation of the preparation of constrained clustering task.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects/{project_id}/clustering\",\n    tags=[\"Constrained clustering\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def prepare_constrained_clustering_task(\n    background_tasks: BackgroundTasks,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Prepare constrained clustering task.\n\n    Args:\n        background_tasks (BackgroundTasks): A background task to run after the return statement.\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow the preparation of constrained clustering task.\n        HTTPException: Raises `HTTP_504_GATEWAY_TIMEOUT` if the task can't be prepared.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the confirmation of the preparation of constrained clustering task.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check status.\n        if project_status[\"state\"] != ICGUIStates.CLUSTERING_TODO:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow the preparation of constrained clustering task during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"pending\" status.\n        project_status[\"state\"] = ICGUIStates.CLUSTERING_PENDING\n\n        # Prepare status by initializing \"task\" status.\n        project_status[\"task\"] = {\n            \"progression\": 1,\n            \"detail\": \"Waiting for background task allocation...\",\n        }\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        ###\n        ### Launch backgroundtask.\n        ###\n\n        # Add the background task.\n        background_tasks.add_task(\n            func=backgroundtasks.run_constrained_clustering_task,\n            project_id=project_id,\n        )\n\n    # Return statement.\n    return {  # pragma: no cover (need radis and worder)\n        \"project_id\": project_id,\n        \"detail\": \"In project with id '{project_id_str}', the constrained clustering task has been requested and is waiting for a background task.\".format(\n            project_id_str=str(project_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.prepare_constraints_sampling_task","title":"<code>prepare_constraints_sampling_task(background_tasks, project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Prepare constraints sampling task.</p> <p>Parameters:</p> Name Type Description Default <code>background_tasks</code> <code>BackgroundTasks</code> <p>A background task to run after the return statement.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow the preparation of constraints sampling task.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the confirmation of the preparation of constraints sampling task.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects/{project_id}/sampling\",\n    tags=[\"Constraints sampling\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def prepare_constraints_sampling_task(\n    background_tasks: BackgroundTasks,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Prepare constraints sampling task.\n\n    Args:\n        background_tasks (BackgroundTasks): A background task to run after the return statement.\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow the preparation of constraints sampling task.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the confirmation of the preparation of constraints sampling task.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Check status.\n        if project_status[\"state\"] != ICGUIStates.SAMPLING_TODO:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow the preparation of constraints sampling task during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"pending\" status.\n        project_status[\"state\"] = ICGUIStates.SAMPLING_PENDING\n\n        # Prepare status by initializing \"task\" status.\n        project_status[\"task\"] = {\n            \"progression\": 1,\n            \"detail\": \"Waiting for background task allocation...\",\n        }\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        ###\n        ### Launch backgroundtask.\n        ###\n\n        # Add the background task.\n        background_tasks.add_task(\n            func=backgroundtasks.run_constraints_sampling_task,\n            project_id=project_id,\n        )\n\n    # Return statement.\n    return {  # pragma: no cover (need radis and worder)\n        \"project_id\": project_id,\n        \"detail\": \"In project with id '{project_id_str}', the constraints sampling task has been requested and is waiting for a background task.\".format(\n            project_id_str=str(project_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.prepare_modelization_update_task","title":"<code>prepare_modelization_update_task(background_tasks, project_id=Path(..., description='The ID of the project.'))</code>  <code>async</code>","text":"<p>Prepare modelization update task.</p> <p>Parameters:</p> Name Type Description Default <code>background_tasks</code> <code>BackgroundTasks</code> <p>A background task to run after the return statement.</p> required <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow the preparation of modelization update task.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the confirmation of the preparation of modelization update task.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.post(\n    \"/api/projects/{project_id}/modelization\",\n    tags=[\"Data modelization\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def prepare_modelization_update_task(\n    background_tasks: BackgroundTasks,\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Prepare modelization update task.\n\n    Args:\n        background_tasks (BackgroundTasks): A background task to run after the return statement.\n        project_id (str): The ID of the project.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow the preparation of modelization update task.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the confirmation of the preparation of modelization update task.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check status.\n        if (\n            project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION  # noqa: WPS514\n            and project_status[\"state\"] != ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\n            and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION\n            and project_status[\"state\"] != ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION\n            and project_status[\"state\"] != ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        ):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow the preparation of modelization update task during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"pending\" status.\n        if project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.INITIALIZATION_WITH_PENDING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif  project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n        else:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS\n\n        # Prepare status by initializing \"task\" status.\n        project_status[\"task\"] = {\n            \"progression\": 1,\n            \"detail\": \"Waiting for background task allocation...\",\n        }\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        ###\n        ### Launch backgroundtask.\n        ###\n\n        # Add the background task.\n        background_tasks.add_task(\n            func=backgroundtasks.run_modelization_update_task,\n            project_id=project_id,\n        )\n\n        # Return statement.\n        return {  # pragma: no cover (need radis and worder)\n            \"project_id\": project_id,\n            \"detail\": \"In project with id '{project_id_str}', the modelization update task has been requested and is waiting for a background task.\".format(\n                project_id_str=str(project_id),\n            ),\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.prometheus_disk_usage","title":"<code>prometheus_disk_usage()</code>","text":"<p>Define a metric of disk usage.</p> <p>Returns:</p> Type Description <code>Callable[[Info], None]</code> <p>Callable[[metrics.Info], None]: instrumentation.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>def prometheus_disk_usage() -&gt; Callable[[metrics.Info], None]:\n    \"\"\"\n    Define a metric of disk usage.\n\n    Returns:\n        Callable[[metrics.Info], None]: instrumentation.\n    \"\"\"\n    gaugemetric = Gauge(\n        \"disk_usage\",\n        \"The disk usage in %\",\n    )\n\n    def instrumentation(info: metrics.Info) -&gt; None:  # noqa: WPS430 (nested function)\n        total, used, _ = shutil.disk_usage(DATA_DIRECTORY)\n        gaugemetric.set(used * 100 / total)\n\n    return instrumentation\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.ready","title":"<code>ready()</code>  <code>async</code>","text":"<p>Tell if the API is ready.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response with either 200 or 503 codes.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.get(\n    \"/ready\",\n    tags=[\"app state\"],\n    status_code=status.HTTP_200_OK,\n)\nasync def ready() -&gt; Response:  # pragma: no cover\n    \"\"\"\n    Tell if the API is ready.\n\n    Returns:\n        An HTTP response with either 200 or 503 codes.\n    \"\"\"\n\n    # Return 200_OK if ready.\n    if app.state.ready:\n        return Response(status_code=status.HTTP_200_OK)\n\n    # Return 503_SERVICE_UNAVAILABLE otherwise.\n    return Response(status_code=status.HTTP_503_SERVICE_UNAVAILABLE)\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.rename_text","title":"<code>rename_text(project_id=Path(..., description='The ID of the project.'), text_id=Path(..., description='The ID of the text.'), text_value=Query(..., description='The new value of the text.', min_length=3, max_length=256))</code>  <code>async</code>","text":"<p>Rename a text.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>text_id</code> <code>str</code> <p>The ID of the text.</p> <code>Path(..., description='The ID of the text.')</code> <code>text_value</code> <code>str</code> <p>The new value of the text.</p> <code>Query(..., description='The new value of the text.', min_length=3, max_length=256)</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the text with id <code>text_id</code> to rename doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow modification.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of renamed text.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/texts/{text_id}/rename\",\n    tags=[\"Texts\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def rename_text(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    text_id: str = Path(\n        ...,\n        description=\"The ID of the text.\",\n    ),\n    text_value: str = Query(\n        ...,\n        description=\"The new value of the text.\",\n        min_length=3,\n        max_length=256,\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Rename a text.\n\n    Args:\n        project_id (str): The ID of the project.\n        text_id (str): The ID of the text.\n        text_value (str): The new value of the text.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the text with id `text_id` to rename doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow modification.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of renamed text.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Load texts file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject_r:\n            texts: Dict[str, Any] = json.load(texts_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check text id.\n        if text_id not in texts.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the text with id '{text_id_str}' to rename doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    text_id_str=str(text_id),\n                ),\n            )\n\n        # Check status.\n        if (\n            project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION  # noqa: WPS514\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        ):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow modification during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"outdated\" status.\n        if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n\n        # Update texts by renaming the new text.\n        texts[text_id][\"text\"] = text_value\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Store updated texts in file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"w\") as texts_fileobject_w:\n            json.dump(texts, texts_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"text_id\": text_id,\n        \"text_value\": text_value,\n        \"detail\": \"In project with id '{project_id_str}', the text with id '{text_id_str}' has been renamed.\".format(\n            project_id_str=str(project_id),\n            text_id_str=str(text_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.review_constraint","title":"<code>review_constraint(project_id=Path(..., description='The ID of the project.'), constraint_id=Path(..., description='The ID of the constraint.'), to_review=Query(True, description='The choice to review or not the constraint. Defaults to `True`.'))</code>  <code>async</code>","text":"<p>Review a constraint.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>constraint_id</code> <code>str</code> <p>The ID of the constraint.</p> <code>Path(..., description='The ID of the constraint.')</code> <code>to_review</code> <code>str</code> <p>The choice to review or not the constraint. Defaults to <code>True</code>.</p> <code>Query(True, description='The choice to review or not the constraint. Defaults to `True`.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the constraint with id <code>constraint_id</code> to annotate doesn't exist.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of reviewed constraint.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/constraints/{constraint_id}/review\",\n    tags=[\"Constraints\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def review_constraint(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    constraint_id: str = Path(\n        ...,\n        description=\"The ID of the constraint.\",\n    ),\n    to_review: bool = Query(\n        True,\n        description=\"The choice to review or not the constraint. Defaults to `True`.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Review a constraint.\n\n    Args:\n        project_id (str): The ID of the project.\n        constraint_id (str): The ID of the constraint.\n        to_review (str): The choice to review or not the constraint. Defaults to `True`.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the constraint with id `constraint_id` to annotate doesn't exist.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of reviewed constraint.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load constraints file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n            constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check constraint id.\n        if constraint_id not in constraints.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' to annotate doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    constraint_id_str=str(constraint_id),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update constraints by reviewing the constraint.\n        constraints[constraint_id][\"to_review\"] = to_review\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated constraints in file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n            json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"constraint_id\": constraint_id,\n        \"detail\": \"In project with id '{project_id_str}', the constraint with id '{constraint_id_str}' {review_conclusion}.\".format(\n            project_id_str=str(project_id),\n            constraint_id_str=str(constraint_id),\n            review_conclusion=\"need a review\" if (to_review) else \"has been reviewed\",\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.startup","title":"<code>startup()</code>  <code>async</code>","text":"<p>Startup event.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.on_event(\"startup\")\nasync def startup() -&gt; None:  # pragma: no cover\n    \"\"\"Startup event.\"\"\"\n\n    # Initialize ready state.\n    app.state.ready = False\n\n    # Apply database connection, long loading, etc.\n\n    # Update ready state when done.\n    app.state.ready = True\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.timestamp_to_date","title":"<code>timestamp_to_date(timestamp, timezone_str='Europe/Paris')</code>","text":"<p>From timestamp to date.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>float</code> <p>The timstamp to convert.</p> required <code>timezone_str</code> <code>str</code> <p>The time zone. Defaults to <code>\"Europe/Paris\"</code>.</p> <code>'Europe/Paris'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The requested date.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>def timestamp_to_date(timestamp: float, timezone_str: str = \"Europe/Paris\") -&gt; str:\n    \"\"\"\n    From timestamp to date.\n\n    Args:\n        timestamp (float): The timstamp to convert.\n        timezone_str (str, optional): The time zone. Defaults to `\"Europe/Paris\"`.\n\n    Returns:\n        str: The requested date.\n    \"\"\"\n    timezone = tz.gettz(timezone_str)\n    return datetime.fromtimestamp(timestamp, timezone).strftime(\"%d/%m/%Y\")\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.timestamp_to_hour","title":"<code>timestamp_to_hour(timestamp, timezone_str='Europe/Paris')</code>","text":"<p>From timestamp to hours.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>float</code> <p>The timstamp to convert.</p> required <code>timezone_str</code> <code>str</code> <p>The time zone. Defaults to <code>\"Europe/Paris\"</code>.</p> <code>'Europe/Paris'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The requested hour.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>def timestamp_to_hour(timestamp: float, timezone_str: str = \"Europe/Paris\") -&gt; str:\n    \"\"\"\n    From timestamp to hours.\n\n    Args:\n        timestamp (float): The timstamp to convert.\n        timezone_str (str, optional): The time zone. Defaults to `\"Europe/Paris\"`.\n\n    Returns:\n        str: The requested hour.\n    \"\"\"\n    timezone = tz.gettz(timezone_str)\n    return datetime.fromtimestamp(timestamp, timezone).strftime(\"%H:%M:%S\")\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.undelete_text","title":"<code>undelete_text(project_id=Path(..., description='The ID of the project.'), text_id=Path(..., description='The ID of the text.'))</code>  <code>async</code>","text":"<p>Undelete a text.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>text_id</code> <code>str</code> <p>The ID of the text.</p> <code>Path(..., description='The ID of the text.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the text with id <code>text_id</code> to undelete doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the current status of the project doesn't allow modification.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of undeleted text.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/texts/{text_id}/undelete\",\n    tags=[\"Texts\"],\n    status_code=status.HTTP_202_ACCEPTED,\n)\nasync def undelete_text(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    text_id: str = Path(\n        ...,\n        description=\"The ID of the text.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Undelete a text.\n\n    Args:\n        project_id (str): The ID of the project.\n        text_id (str): The ID of the text.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the text with id `text_id` to undelete doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the current status of the project doesn't allow modification.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of undeleted text.\n    \"\"\"\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject:\n            project_status: Dict[str, Any] = json.load(status_fileobject)\n\n        # Load texts file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject_r:\n            texts: Dict[str, Any] = json.load(texts_fileobject_r)\n\n        # Load constraints file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n            constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check text id.\n        if text_id not in texts.keys():\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"In project with id '{project_id_str}', the text with id '{text_id_str}' to undelete doesn't exist.\".format(\n                    project_id_str=str(project_id),\n                    text_id_str=str(text_id),\n                ),\n            )\n\n        # Check status.\n        if (\n            project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION  # noqa: WPS514\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        ):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The project with id '{project_id_str}' doesn't allow modification during this state (state='{state_str}').\".format(\n                    project_id_str=str(project_id),\n                    state_str=str(project_status[\"state\"]),\n                ),\n            )\n\n        ###\n        ### Update data.\n        ###\n\n        # Update status by forcing \"outdated\" status.\n        if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n            project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n        #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n        ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n\n        # Update texts by undeleting the text.\n        texts[text_id][\"is_deleted\"] = False\n\n        # Update constraints by unhidding those associated with the undeleted text.\n        for constraint_id, constraint_value in constraints.items():\n            data_id1: str = constraint_value[\"data\"][\"id_1\"]\n            data_id2: str = constraint_value[\"data\"][\"id_2\"]\n\n            if text_id in {data_id1, data_id2}:\n                constraints[constraint_id][\"is_hidden\"] = (\n                    texts[data_id1][\"is_deleted\"] is True or texts[data_id2][\"is_deleted\"] is True\n                )\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Store updated texts in file.\n        with open(DATA_DIRECTORY / project_id / \"texts.json\", \"w\") as texts_fileobject_w:\n            json.dump(texts, texts_fileobject_w, indent=4)\n\n        # Store updated constraints in file.\n        with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n            json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    # Return statement.\n    return {\n        \"project_id\": project_id,\n        \"text_id\": text_id,\n        \"detail\": \"In project with id '{project_id_str}', the text with id '{text_id_str}' has been undeleted. Several constraints have been unhidden.\".format(\n            project_id_str=str(project_id),\n            text_id_str=str(text_id),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/app/#cognitivefactory.interactive_clustering_gui.app.update_settings","title":"<code>update_settings(project_id=Path(..., description='The ID of the project.'), preprocessing=Body(None, description='The settings for data preprocessing. Used during `modelization_update` task. Keep unchanged if empty.'), vectorization=Body(None, description='The settings for data vectorization. Used during `modelization_update` task. Keep unchanged if empty.'), sampling=Body(None, description='The settings for constraints sampling. Used during `constraints_sampling` task. Keep unchanged if empty.'), clustering=Body(None, description='The settings for constrained clustering. Used during `constrained_clustering` task. Keep unchanged if empty.'))</code>  <code>async</code>","text":"<p>Update settings.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> <code>Path(..., description='The ID of the project.')</code> <code>preprocessing</code> <code>Optional[PreprocessingSettingsModel]</code> <p>The settings for data preprocessing. Used during <code>clustering</code> step. Keep unchanged if empty.. Defaults to None.</p> <code>Body(None, description='The settings for data preprocessing. Used during `modelization_update` task. Keep unchanged if empty.')</code> <code>vectorization</code> <code>Optional[VectorizationSettingsModel]</code> <p>The settings for data vectorization. Used during <code>clustering</code> step. Keep unchanged if empty.. Defaults to None.</p> <code>Body(None, description='The settings for data vectorization. Used during `modelization_update` task. Keep unchanged if empty.')</code> <code>sampling</code> <code>Optional[SamplingSettingsModel]</code> <p>The settings for constraints sampling. Used during <code>sampling</code> step. Keep unchanged if empty.. Defaults to None.</p> <code>Body(None, description='The settings for constraints sampling. Used during `constraints_sampling` task. Keep unchanged if empty.')</code> <code>clustering</code> <code>Optional[ClusteringSettingsModel]</code> <p>The settings for constrained clustering. Used during <code>clustering</code> step. Keep unchanged if empty. Defaults to None.</p> <code>Body(None, description='The settings for constrained clustering. Used during `constrained_clustering` task. Keep unchanged if empty.')</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raises <code>HTTP_404_NOT_FOUND</code> if the project with id <code>project_id</code> doesn't exist.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if the status of the project doesn't allow settings modifications.</p> <code>HTTPException</code> <p>Raises <code>HTTP_403_FORBIDDEN</code> if parameters <code>preprocessing</code>, <code>vectorization</code>, <code>sampling</code> or <code>clustering</code> are not expected.</p> <code>HTTPException</code> <p>Raises <code>HTTP_400_BAD_REQUEST</code> if parameters <code>preprocessing</code>, <code>vectorization</code>, <code>sampling</code> or <code>clustering</code> are invalid.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains the ID of updated settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\app.py</code> <pre><code>@app.put(\n    \"/api/projects/{project_id}/settings\",\n    tags=[\"Settings\"],\n    status_code=status.HTTP_201_CREATED,\n)\nasync def update_settings(\n    project_id: str = Path(\n        ...,\n        description=\"The ID of the project.\",\n    ),\n    preprocessing: Optional[PreprocessingSettingsModel] = Body(\n        None,\n        description=\"The settings for data preprocessing. Used during `modelization_update` task. Keep unchanged if empty.\",\n    ),\n    vectorization: Optional[VectorizationSettingsModel] = Body(\n        None,\n        description=\"The settings for data vectorization. Used during `modelization_update` task. Keep unchanged if empty.\",\n    ),\n    sampling: Optional[SamplingSettingsModel] = Body(\n        None,\n        description=\"The settings for constraints sampling. Used during `constraints_sampling` task. Keep unchanged if empty.\",\n    ),\n    clustering: Optional[ClusteringSettingsModel] = Body(\n        None,\n        description=\"The settings for constrained clustering. Used during `constrained_clustering` task. Keep unchanged if empty.\",\n    ),\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update settings.\n\n    Args:\n        project_id (str): The ID of the project.\n        preprocessing (Optional[PreprocessingSettingsModel], optional): The settings for data preprocessing. Used during `clustering` step. Keep unchanged if empty.. Defaults to None.\n        vectorization (Optional[VectorizationSettingsModel], optional): The settings for data vectorization. Used during `clustering` step. Keep unchanged if empty.. Defaults to None.\n        sampling (Optional[SamplingSettingsModel], optional): The settings for constraints sampling. Used during `sampling` step. Keep unchanged if empty.. Defaults to None.\n        clustering (Optional[ClusteringSettingsModel], optional): The settings for constrained clustering. Used during `clustering` step. Keep unchanged if empty. Defaults to None.\n\n    Raises:\n        HTTPException: Raises `HTTP_404_NOT_FOUND` if the project with id `project_id` doesn't exist.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if the status of the project doesn't allow settings modifications.\n        HTTPException: Raises `HTTP_403_FORBIDDEN` if parameters `preprocessing`, `vectorization`, `sampling` or `clustering` are not expected.\n        HTTPException: Raises `HTTP_400_BAD_REQUEST` if parameters `preprocessing`, `vectorization`, `sampling` or `clustering` are invalid.\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains the ID of updated settings.\n    \"\"\"\n\n    # TODO: examples: https://fastapi.tiangolo.com/tutorial/schema-extra-example/#body-with-multiple-examples\n\n    # Check project id.\n    if project_id not in (await get_projects()):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"The project with id '{project_id_str}' doesn't exist.\".format(\n                project_id_str=str(project_id),\n            ),\n        )\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n            project_status: Dict[str, Any] = json.load(status_fileobject_r)\n        iteration_id: int = project_status[\"iteration_id\"]\n\n        # Load settings file.\n        with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject_r:\n            project_settings: Dict[str, Any] = json.load(settings_fileobject_r)\n\n        list_of_updated_settings: List[ICGUISettings] = []\n\n        ###\n        ### Case of preprocessing settings.\n        ###\n        if preprocessing is not None:\n            list_of_updated_settings.append(ICGUISettings.PREPROCESSING)\n\n            # Check project status for preprocessing.\n            if (\n                project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION  # noqa: WPS514\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n            ):\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"The 'preprocessing' settings of project with id '{project_id_str}' cant't be modified during this state (state='{state_str}'). No changes have been taken into account.\".format(\n                        project_id_str=str(project_id),\n                        state_str=str(project_status[\"state\"]),\n                    ),\n                )\n\n            # Update status by forcing \"outdated\" status.\n            if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n                project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n            ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n            ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION:\n            ####    project_status[\"state\"] = ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION\n\n            # Update the default settings with the parameters in the request body.\n            for key_prep, value_prep in preprocessing.to_dict().items():\n                project_settings[str(iteration_id)][\"preprocessing\"][key_prep] = value_prep\n\n        ###\n        ### Case of vectorization settings.\n        ###\n        if vectorization is not None:\n            list_of_updated_settings.append(ICGUISettings.VECTORIZATION)\n\n            # Check project status for vectorization.\n            if (\n                project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION  # noqa: WPS514\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n            ):\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"The 'vectorization' settings of project with id '{project_id_str}' cant't be modified during this state (state='{state_str}'). No changes have been taken into account.\".format(\n                        project_id_str=str(project_id),\n                        state_str=str(project_status[\"state\"]),\n                    ),\n                )\n\n            # Update status by forcing \"outdated\" status.\n            if project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION:\n                project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS:\n            ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS:\n            ####    project_status[\"state\"] = ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n            #### elif project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION:\n            ####    project_status[\"state\"] = ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION\n\n            # Update the default settings with the parameters in the request body.\n            for key_vect, value_vect in vectorization.to_dict().items():\n                project_settings[str(iteration_id)][\"vectorization\"][key_vect] = value_vect\n\n        ###\n        ### Case of sampling settings.\n        ###\n        if sampling is not None:\n            list_of_updated_settings.append(ICGUISettings.SAMPLING)\n\n            # Check project status for sampling.\n            if project_status[\"state\"] != ICGUIStates.SAMPLING_TODO:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"The 'sampling' settings of project with id '{project_id_str}' cant't be modified during this state (state='{state_str}'). No changes have been taken into account.\".format(\n                        project_id_str=str(project_id),\n                        state_str=str(project_status[\"state\"]),\n                    ),\n                )\n\n            # Update the default settings with the parameters in the request body.\n            for key_sampl, value_sampl in sampling.to_dict().items():\n                project_settings[str(iteration_id)][\"sampling\"][key_sampl] = value_sampl\n\n        ###\n        ### Case of clustering settings.\n        ###\n        if clustering is not None:\n            list_of_updated_settings.append(ICGUISettings.CLUSTERING)\n\n            # Check project status for clustering.\n            if (\n                project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION  # noqa: WPS514\n                and project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITH_PENDING_MODELIZATION\n                and project_status[\"state\"] != ICGUIStates.INITIALIZATION_WITH_WORKING_MODELIZATION\n                and project_status[\"state\"] != ICGUIStates.SAMPLING_TODO\n                and project_status[\"state\"] != ICGUIStates.SAMPLING_PENDING\n                and project_status[\"state\"] != ICGUIStates.SAMPLING_WORKING\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS\n                and project_status[\"state\"] != ICGUIStates.CLUSTERING_TODO\n            ):\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"The 'clustering' settings of project with id '{project_id_str}' cant't be modified during this state (state='{state_str}'). No changes have been taken into account.\".format(\n                        project_id_str=str(project_id),\n                        state_str=str(project_status[\"state\"]),\n                    ),\n                )\n\n            # Update the default settings with the parameters in the request body.\n            for key_clus, value_clus in clustering.to_dict().items():\n                project_settings[str(iteration_id)][\"clustering\"][key_clus] = value_clus\n\n        ###\n        ### Store updated data.\n        ###\n\n        # Store updated status in file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n            json.dump(project_status, status_fileobject_w, indent=4)\n\n        # Store updated settings in file.\n        with open(DATA_DIRECTORY / project_id / \"settings.json\", \"w\") as settings_fileobject_w:\n            json.dump(project_settings, settings_fileobject_w, indent=4)\n\n    ###\n    ### Return statement.\n    ###\n    return {\n        \"project_id\": project_id,\n        \"detail\": \"The project with id '{project_id_str}' has updated the following settings: {settings_str}.\".format(\n            project_id_str=str(project_id),\n            settings_str=\", \".join(list_of_updated_settings),\n        ),\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/","title":"backgroundtasks","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.backgroundtasks</li> <li>Description:  Definition of bakgroundtasks for interactive clustering graphical user interface.</li> <li>Author:       Erwan Schild</li> <li>Created:      22/10/2021</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/#cognitivefactory.interactive_clustering_gui.backgroundtasks.get_projects","title":"<code>get_projects()</code>","text":"<p>Get the list of existing project IDs. (A project is represented by a subfolder in <code>.data</code> folder.)</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The list of existing project IDs.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\backgroundtasks.py</code> <pre><code>def get_projects() -&gt; List[str]:\n    \"\"\"\n    Get the list of existing project IDs.\n    (A project is represented by a subfolder in `.data` folder.)\n\n    Returns:\n        List[str]: The list of existing project IDs.\n    \"\"\"\n\n    # Return the list of project IDs.\n    return [project_id for project_id in os.listdir(DATA_DIRECTORY) if os.path.isdir(DATA_DIRECTORY / project_id)]\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/#cognitivefactory.interactive_clustering_gui.backgroundtasks.run_constrained_clustering_task","title":"<code>run_constrained_clustering_task(project_id)</code>","text":"<p>Background task for constraints clustering task. It performs the following actions : constrained clustering.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> required Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\backgroundtasks.py</code> <pre><code>def run_constrained_clustering_task(\n    project_id: str,\n) -&gt; None:\n    \"\"\"\n    Background task for constraints clustering task.\n    It performs the following actions : constrained clustering.\n\n    Args:\n        project_id (str): The ID of the project.\n    \"\"\"\n\n    ###\n    ### Check parameters.\n    ###\n\n    # Check project id : Case of unknown.\n    if project_id not in get_projects():\n        return\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n            project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n        # Check project status.\n        if project_status[\"state\"] != ICGUIStates.CLUSTERING_PENDING:\n            return\n\n        # Update status.\n        update_project_status(\n            project_id=project_id,\n            task_progression=5,\n            task_detail=\"Lock the project for constrained clustering step.\",\n            state=ICGUIStates.CLUSTERING_WORKING,\n        )\n\n    # Get current iteration.\n    iteration_id: int = project_status[\"iteration_id\"]\n\n    ###\n    ### Settings loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=10,\n            task_detail=\"Load settings.\",\n        )\n\n    # Load settings file.\n    with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject:\n        settings: Dict[str, Any] = json.load(settings_fileobject)\n\n    ###\n    ### Constraints manager loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=20,\n            task_detail=\"Load constraints manager.\",\n        )\n\n    # Load constraints manager.\n    with open(DATA_DIRECTORY / project_id / \"constraints_manager.pkl\", \"rb\") as constraints_manager_fileobject:\n        constraints_manager: BinaryConstraintsManager = pickle.load(  # noqa: S301  # Usage of Pickle\n            constraints_manager_fileobject\n        )\n\n    ###\n    ### Vectors loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=30,\n            task_detail=\"Load vectors.\",\n        )\n\n    # Load vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors.pkl\", \"rb\") as vectors_fileobject:\n        dict_of_managed_vectors: Dict[str, csr_matrix] = pickle.load(  # noqa: S301  # Usage of Pickle\n            vectors_fileobject\n        )\n\n    ###\n    ### Clustering model initialization.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=40,\n            task_detail=\"Initialize clustering model.\",\n        )\n\n    # Initialize clustering model.\n    kwargs_clustering_init: Dict[str, Any] = (\n        settings[str(iteration_id)][\"clustering\"][\"init_kargs\"]\n        if (settings[str(iteration_id)][\"clustering\"][\"init_kargs\"] is not None)\n        else {}\n    )\n    clustering_model: AbstractConstrainedClustering = clustering_factory(\n        algorithm=settings[str(iteration_id)][\"clustering\"][\"algorithm\"],\n        random_seed=settings[str(iteration_id)][\"clustering\"][\"random_seed\"],\n        **kwargs_clustering_init,\n    )\n\n    ###\n    ### Constrained clustering.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=50,\n            task_detail=\"Run constrained clustering.\",\n        )\n\n    # Run constrained clustering.\n    clustering_result: Dict[str, int] = clustering_model.cluster(\n        constraints_manager=constraints_manager,\n        vectors=dict_of_managed_vectors,\n        nb_clusters=settings[str(iteration_id)][\"clustering\"][\"nb_clusters\"],\n    )\n\n    ###\n    ### Clustering results storage.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=90,\n            task_detail=\"Store clustering results.\",\n        )\n\n    # Load clustering results file.\n    with open(DATA_DIRECTORY / project_id / \"clustering.json\", \"r\") as clustering_fileobject_r:\n        history_of_clustering_results: Dict[str, Dict[str, int]] = json.load(clustering_fileobject_r)\n\n    # Update clustering results.\n    history_of_clustering_results[str(iteration_id)] = clustering_result\n\n    # Store clustering results.\n    with open(DATA_DIRECTORY / project_id / \"clustering.json\", \"w\") as clustering_fileobject_w:\n        json.dump(\n            history_of_clustering_results,\n            clustering_fileobject_w,\n            indent=4,\n        )\n\n    ###\n    ### End of task.\n    ###\n\n    # Lock status file in order to update project status.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=None,\n            task_detail=None,\n            state=ICGUIStates.ITERATION_END,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/#cognitivefactory.interactive_clustering_gui.backgroundtasks.run_constraints_sampling_task","title":"<code>run_constraints_sampling_task(project_id)</code>","text":"<p>Background task route for constraints sampling task. It performs the following actions : constraints sampling.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> required Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\backgroundtasks.py</code> <pre><code>def run_constraints_sampling_task(\n    project_id: str,\n) -&gt; None:\n    \"\"\"\n    Background task route for constraints sampling task.\n    It performs the following actions : constraints sampling.\n\n    Args:\n        project_id (str): The ID of the project.\n    \"\"\"\n\n    ###\n    ### Check parameters.\n    ###\n\n    # Check project id : Case of unknown.\n    if project_id not in get_projects():\n        return\n\n    # Lock status file in order to check project iteration and project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n            project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n        # Check project status.\n        if project_status[\"state\"] != ICGUIStates.SAMPLING_PENDING:\n            return\n\n        # Update status.\n        update_project_status(\n            project_id=project_id,\n            task_progression=5,\n            task_detail=\"Lock the project for constraints sampling step.\",\n            state=ICGUIStates.SAMPLING_WORKING,\n        )\n\n    # Get current iteration.\n    iteration_id: int = project_status[\"iteration_id\"]\n\n    ###\n    ### Settings loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=10,\n            task_detail=\"Load settings.\",\n        )\n\n    # Load settings file.\n    with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject:\n        settings: Dict[str, Any] = json.load(settings_fileobject)\n\n    # Get previous iteration id.\n    previous_iteration_id: int = iteration_id - 1\n\n    ###\n    ### Constraints manager loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=20,\n            task_detail=\"Load constraints manager.\",\n        )\n\n    # Load constraints manager.\n    with open(DATA_DIRECTORY / project_id / \"constraints_manager.pkl\", \"rb\") as constraints_manager_fileobject:\n        constraints_manager: BinaryConstraintsManager = pickle.load(  # noqa: S301  # Usage of Pickle\n            constraints_manager_fileobject\n        )\n\n    ###\n    ### Clustering results loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=30,\n            task_detail=\"Load previous clustering results.\",\n        )\n\n    # Get previous clustering result.\n    with open(DATA_DIRECTORY / project_id / \"clustering.json\", \"r\") as clustering_fileobject:\n        clustering_results_for_previous_iteration: Dict[str, int] = json.load(clustering_fileobject)[\n            str(previous_iteration_id)\n        ]\n\n    ###\n    ### Vectors loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=40,\n            task_detail=\"Load vectors.\",\n        )\n\n    # Load vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors.pkl\", \"rb\") as vectors_fileobject:\n        dict_of_managed_vectors: Dict[str, csr_matrix] = pickle.load(  # noqa: S301  # Usage of Pickle\n            vectors_fileobject\n        )\n\n    ###\n    ### Constraints sampling initialization.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=50,\n            task_detail=\"Initialize constraints sampler.\",\n        )\n\n    # Initialize constraints sampler.\n    kwargs_sampling_init: Dict[str, Any] = (\n        settings[str(iteration_id)][\"sampling\"][\"init_kargs\"]\n        if (settings[str(iteration_id)][\"sampling\"][\"init_kargs\"] is not None)\n        else {}\n    )\n    sampler: AbstractConstraintsSampling = (\n        ClustersBasedConstraintsSampling(**kwargs_sampling_init)\n        if (settings[str(iteration_id)][\"sampling\"][\"algorithm\"] == \"custom\")\n        else sampling_factory(\n            algorithm=settings[str(iteration_id)][\"sampling\"][\"algorithm\"],\n            random_seed=settings[str(iteration_id)][\"sampling\"][\"random_seed\"],\n            **kwargs_sampling_init,\n        )\n    )\n\n    ###\n    ### Constraints sampling.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=60,\n            task_detail=\"Sample {nb} pairs of texts to annotate.\".format(\n                nb=str(settings[str(iteration_id)][\"sampling\"][\"nb_to_select\"])\n            ),\n        )\n\n    # Sample pairs of data to annotate.\n    sampling_result: List[Tuple[str, str]] = sampler.sample(\n        constraints_manager=constraints_manager,\n        nb_to_select=settings[str(iteration_id)][\"sampling\"][\"nb_to_select\"],\n        clustering_result=clustering_results_for_previous_iteration,\n        vectors=dict_of_managed_vectors,\n    )\n\n    # If needed: complete with some random pairs of data IDs.\n    if len(sampling_result) &lt; settings[str(iteration_id)][\"sampling\"][\"nb_to_select\"]:\n        with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n            update_project_status(\n                project_id=project_id,\n                task_progression=75,\n                task_detail=\"Need to complete with {nb} random pairs of texts.\".format(\n                    nb=str(settings[str(iteration_id)][\"sampling\"][\"nb_to_select\"] - len(sampling_result))\n                ),\n            )\n        sampling_result += [\n            random_sample\n            for random_sample in sampling_factory(\n                algorithm=\"random\",\n                random_seed=settings[str(iteration_id)][\"sampling\"][\"random_seed\"],\n            ).sample(\n                constraints_manager=constraints_manager,\n                nb_to_select=settings[str(iteration_id)][\"sampling\"][\"nb_to_select\"] - len(sampling_result),\n            )\n            if random_sample not in sampling_result\n        ]\n\n    ###\n    ### Sampling results storage.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=90,\n            task_detail=\"Store sampling results and prepapre annotations.\",\n        )\n\n    # Load sampling results file.\n    with open(DATA_DIRECTORY / project_id / \"sampling.json\", \"r\") as sampling_fileobject_r:\n        sampling_results: Dict[str, List[str]] = json.load(sampling_fileobject_r)\n\n    # Load constraints file.\n    with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n        constraints: Dict[str, Dict[str, Any]] = json.load(constraints_fileobject_r)\n\n    # Initialize sampling result for this iteration.\n    sampling_results[str(iteration_id)] = []\n\n    # For all sampling to annotate...\n    for data_ID1, data_ID2 in sampling_result:\n        # Define sampling id.\n        constraint_id: str = \"({data_ID1_str},{data_ID2_str})\".format(\n            data_ID1_str=data_ID1,\n            data_ID2_str=data_ID2,\n        )\n\n        # Add sampling id.\n        sampling_results[str(iteration_id)].append(constraint_id)\n\n        # Update constraints if not already known.\n        if constraint_id not in constraints.keys():\n            constraints[constraint_id] = {\n                \"data\": {\n                    \"id_1\": data_ID1,\n                    \"id_2\": data_ID2,\n                },\n                \"constraint_type\": None,\n                \"constraint_type_previous\": [],\n                \"is_hidden\": False,  # if text is deleted.\n                \"to_annotate\": False,\n                \"to_review\": False,\n                \"to_fix_conflict\": False,\n                \"comment\": \"\",\n                \"date_of_update\": None,\n                \"iteration_of_sampling\": iteration_id,\n            }\n        constraints[constraint_id][\"to_annotate\"] = True\n\n    # Store sampling results.\n    with open(DATA_DIRECTORY / project_id / \"sampling.json\", \"w\") as sampling_fileobject_w:\n        json.dump(\n            sampling_results,\n            sampling_fileobject_w,\n            indent=4,\n        )\n\n    # Store constraints results.\n    with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n        json.dump(\n            constraints,\n            constraints_fileobject_w,\n            indent=4,\n        )\n\n    ###\n    ### End of task.\n    ###\n\n    # Lock status file in order to update project status.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=None,\n            task_detail=None,\n            state=ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/#cognitivefactory.interactive_clustering_gui.backgroundtasks.run_modelization_update_task","title":"<code>run_modelization_update_task(project_id)</code>","text":"<p>Background task route for modelization update. It performs the following actions : texts propressing, texts vectorization, constraints manager update. Emit message to share progress, raise error and announce success.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> required Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\backgroundtasks.py</code> <pre><code>def run_modelization_update_task(\n    project_id: str,\n) -&gt; None:\n    \"\"\"\n    Background task route for modelization update.\n    It performs the following actions : texts propressing, texts vectorization, constraints manager update.\n    Emit message to share progress, raise error and announce success.\n\n    Args:\n        project_id (str): The ID of the project.\n    \"\"\"\n\n    ###\n    ### Check parameters.\n    ###\n\n    # Check project id : Case of unknown.\n    if project_id not in get_projects():\n        return\n\n    # Lock status file in order to check project status for this step.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        ###\n        ### Load needed data.\n        ###\n\n        # Load status file.\n        with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n            project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n        ###\n        ### Check parameters.\n        ###\n\n        # Check project status.\n        working_state: Optional[ICGUIStates] = None\n        if project_status[\"state\"] == ICGUIStates.INITIALIZATION_WITH_PENDING_MODELIZATION:\n            working_state = ICGUIStates.INITIALIZATION_WITH_WORKING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION:\n            working_state = ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION:\n            working_state = ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION:\n            working_state = ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION:\n            working_state = ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION\n        elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS:\n            working_state = ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS\n        elif project_status[\"state\"] == ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS:\n            working_state = ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS\n        else:\n            return\n\n        # Update status.\n        update_project_status(\n            project_id=project_id,\n            task_progression=5,\n            task_detail=\"Lock the project for modelization update step.\",\n            state=working_state,\n        )\n\n    # Get current iteration.\n    iteration_id: int = project_status[\"iteration_id\"]\n\n    ###\n    ### Settings loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=10,\n            task_detail=\"Load settings.\",\n        )\n\n    # Load settings file.\n    with open(DATA_DIRECTORY / project_id / \"settings.json\", \"r\") as settings_fileobject:\n        settings: Dict[str, Any] = json.load(settings_fileobject)\n\n    ###\n    ### Texts loading.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=15,\n            task_detail=\"Load texts.\",\n        )\n\n    # Load texts\n    with open(DATA_DIRECTORY / project_id / \"texts.json\", \"r\") as texts_fileobject_r:\n        texts: Dict[str, Any] = json.load(texts_fileobject_r)\n\n    ###\n    ### Texts preprocessing.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=20,\n            task_detail=\"Preprocess texts.\",\n        )\n\n    # Get all unpreprocessed texts.\n    dict_of_unpreprocessed_texts: Dict[str, str] = {\n        text_id_before_preprocessing: text_value_before_preprocessing[\"text\"]\n        for text_id_before_preprocessing, text_value_before_preprocessing in texts.items()\n    }\n\n    # Preprocess all texts (even if text is deleted).\n    dict_of_preprocessed_texts: Dict[str, str] = preprocess(\n        dict_of_texts=dict_of_unpreprocessed_texts,\n        apply_stopwords_deletion=settings[str(iteration_id)][\"preprocessing\"][\"apply_stopwords_deletion\"],\n        apply_parsing_filter=settings[str(iteration_id)][\"preprocessing\"][\"apply_parsing_filter\"],\n        apply_lemmatization=settings[str(iteration_id)][\"preprocessing\"][\"apply_lemmatization\"],\n        spacy_language_model=settings[str(iteration_id)][\"preprocessing\"][\"spacy_language_model\"],\n    )\n\n    # Update texts with preprocessed values.\n    for text_id_with_preprocessing in texts.keys():\n        texts[text_id_with_preprocessing][\"text_preprocessed\"] = dict_of_preprocessed_texts[text_id_with_preprocessing]\n\n    # Store texts.\n    with open(DATA_DIRECTORY / project_id / \"texts.json\", \"w\") as texts_fileobject_w:\n        json.dump(\n            texts,\n            texts_fileobject_w,\n            indent=4,\n        )\n\n    ###\n    ### Texts vectorization.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=35,\n            task_detail=\"Vectorize texts.\",\n        )\n\n    # Get managed preprocessed texts.\n    dict_of_managed_preprocessed_texts: Dict[str, str] = {\n        text_id_before_vectorization: text_value_before_vectorization[\"text_preprocessed\"]\n        for text_id_before_vectorization, text_value_before_vectorization in texts.items()\n        if text_value_before_vectorization[\"is_deleted\"] is False\n    }\n\n    # Vectorize texts (only if text is not deleted).\n    dict_of_managed_vectors: Dict[str, csr_matrix] = vectorize(\n        dict_of_texts=dict_of_managed_preprocessed_texts,\n        vectorizer_type=settings[str(iteration_id)][\"vectorization\"][\"vectorizer_type\"],\n        spacy_language_model=settings[str(iteration_id)][\"vectorization\"][\"spacy_language_model\"],\n    )\n\n    # Store vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors.pkl\", \"wb\") as vectors_fileobject:\n        pickle.dump(\n            dict_of_managed_vectors,\n            vectors_fileobject,\n            pickle.HIGHEST_PROTOCOL,\n        )\n\n    # Convert vectors into matrix.\n    vectors_ND: csr_matrix = vstack(\n        dict_of_managed_vectors[text_id_with_ND] for text_id_with_ND in dict_of_managed_vectors.keys()\n    )\n\n    ###\n    ### Texts vectorization in 2D.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=50,\n            task_detail=\"Reduce vectors to 2 dimensions.\",\n        )\n\n    # Reduce vectors to 2 dimensions with TSNE.\n    vectors_2D: ndarray = TSNE(\n        n_components=2,\n        # learning_rate=\"auto\",  # Error on \"scikit-learn==0.24.1\" !\n        init=\"random\",\n        random_state=settings[str(iteration_id)][\"vectorization\"][\"random_seed\"],\n        perplexity=min(30.0, vectors_ND.shape[0] - 1),  # TSNE requirement.\n    ).fit_transform(vectors_ND)\n\n    # Store 2D vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors_2D.json\", \"w\") as vectors_2D_fileobject:\n        json.dump(\n            {\n                text_id_with_2D: {\n                    \"x\": float(vectors_2D[i_2D][0]),\n                    \"y\": float(vectors_2D[i_2D][1]),\n                }\n                for i_2D, text_id_with_2D in enumerate(dict_of_managed_vectors.keys())\n            },\n            vectors_2D_fileobject,\n            indent=4,\n        )\n\n    ###\n    ### Texts vectorization in 3D.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=65,\n            task_detail=\"Reduce vectors to 3 dimensions.\",\n        )\n\n    # Reduce vectors to 3 dimensions with TSNE.\n    vectors_3D: ndarray = TSNE(\n        n_components=3,\n        # learning_rate=\"auto\",  # Error on \"scikit-learn==0.24.1\" !\n        init=\"random\",\n        random_state=settings[str(iteration_id)][\"vectorization\"][\"random_seed\"],\n        perplexity=min(30.0, vectors_ND.shape[0] - 1),  # TSNE requirement.\n    ).fit_transform(vectors_ND)\n\n    # Store 3D vectors.\n    with open(DATA_DIRECTORY / project_id / \"vectors_3D.json\", \"w\") as vectors_3D_fileobject:\n        json.dump(\n            {\n                text_id_with_3D: {\n                    \"x\": float(vectors_3D[i_3D][0]),\n                    \"y\": float(vectors_3D[i_3D][1]),\n                    \"z\": float(vectors_3D[i_3D][2]),\n                }\n                for i_3D, text_id_with_3D in enumerate(dict_of_managed_vectors.keys())\n            },\n            vectors_3D_fileobject,\n            indent=4,\n        )\n\n    ###\n    ### Constraints manager regeneration.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=80,\n            task_detail=\"(Re)generate constraints manager.\",\n        )\n\n    # Initialize constraints manager with managed texts IDs.\n    new_constraints_manager: BinaryConstraintsManager = BinaryConstraintsManager(\n        list_of_data_IDs=list(dict_of_managed_preprocessed_texts.keys())\n    )\n\n    # Load annotated constraints.\n    with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"r\") as constraints_fileobject_r:\n        constraints: Dict[str, Any] = json.load(constraints_fileobject_r)\n\n    # First, reset `to_fix_conflict` status of all constraints.\n    for constraint_id in constraints.keys():\n        constraints[constraint_id][\"to_fix_conflict\"] = False\n\n    # Then, update constraints manager with \"CANNOT_LINK\" constraints.\n    for _, constraint_CL in constraints.items():\n        if constraint_CL[\"constraint_type\"] == \"CANNOT_LINK\" and constraint_CL[\"is_hidden\"] is False:\n            new_constraints_manager.add_constraint(\n                data_ID1=constraint_CL[\"data\"][\"id_1\"],\n                data_ID2=constraint_CL[\"data\"][\"id_2\"],\n                constraint_type=\"CANNOT_LINK\",\n            )  # No conflict can append, at this step the constraints manager handle only constraints of same type.\n\n    # Initialize conflicts counter.\n    number_of_conflicts: int = 0\n\n    # Finaly, update constraints manager with \"MUST_LINK\" constraints.\n    for constraint_ML_id, constraint_ML in constraints.items():\n        if constraint_ML[\"constraint_type\"] == \"MUST_LINK\" and constraint_ML[\"is_hidden\"] is False:\n            try:\n                new_constraints_manager.add_constraint(\n                    data_ID1=constraint_ML[\"data\"][\"id_1\"],\n                    data_ID2=constraint_ML[\"data\"][\"id_2\"],\n                    constraint_type=\"MUST_LINK\",\n                )  # Conflicts can append.\n            except ValueError:\n                # Update conflicts status.\n                constraints[constraint_ML_id][\"to_fix_conflict\"] = True\n                number_of_conflicts += 1\n\n    # Store new constraints manager.\n    with open(DATA_DIRECTORY / project_id / \"constraints_manager.pkl\", \"wb\") as constraints_manager_fileobject:\n        pickle.dump(\n            new_constraints_manager,\n            constraints_manager_fileobject,\n            pickle.HIGHEST_PROTOCOL,\n        )\n\n    # Store updated constraints in file.\n    with open(DATA_DIRECTORY / project_id / \"constraints.json\", \"w\") as constraints_fileobject_w:\n        json.dump(constraints, constraints_fileobject_w, indent=4)\n\n    ###\n    ### Store modelization inference.\n    ###\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=95,\n            task_detail=\"Store modelization inference results.\",\n        )\n\n    # Load modelization inference file.\n    with open(DATA_DIRECTORY / project_id / \"modelization.json\", \"r\") as modelization_fileobject_r:\n        modelization: Dict[str, Any] = json.load(modelization_fileobject_r)\n\n    # Get constraints transitivity.\n    constraints_transitivity: Dict[\n        str, Dict[str, Dict[str, None]]\n    ] = new_constraints_manager._constraints_transitivity  # noqa: WPS437\n\n    # Update modelization inference.\n    modelization = {}\n    for text_id_in_manager in new_constraints_manager.get_list_of_managed_data_IDs():\n        modelization[text_id_in_manager] = {\n            \"MUST_LINK\": list(constraints_transitivity[text_id_in_manager][\"MUST_LINK\"].keys()),\n            \"CANNOT_LINK\": list(constraints_transitivity[text_id_in_manager][\"CANNOT_LINK\"].keys()),\n        }\n    for component_id, component in enumerate(new_constraints_manager.get_connected_components()):\n        for text_id_in_component in component:\n            modelization[text_id_in_component][\"COMPONENT\"] = component_id\n\n    # Store updated modelization inference in file.\n    with open(DATA_DIRECTORY / project_id / \"modelization.json\", \"w\") as modelization_fileobject_w:\n        json.dump(modelization, modelization_fileobject_w, indent=4)\n\n    ###\n    ### End of task.\n    ###\n\n    # Define the next state.\n    end_state: Optional[ICGUIStates] = None\n    if working_state == ICGUIStates.INITIALIZATION_WITH_WORKING_MODELIZATION:\n        end_state = (\n            ICGUIStates.CLUSTERING_TODO if (number_of_conflicts == 0) else ICGUIStates.INITIALIZATION_WITH_ERRORS\n        )\n    elif working_state == ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION:\n        end_state = (\n            ICGUIStates.SAMPLING_TODO if (number_of_conflicts == 0) else ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_ERRORS\n        )\n    elif working_state == ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION:\n        end_state = (\n            ICGUIStates.CLUSTERING_TODO\n            if (number_of_conflicts == 0)\n            else ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_ERRORS\n        )\n    elif working_state == ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION:\n        end_state = (\n            ICGUIStates.ITERATION_END if (number_of_conflicts == 0) else ICGUIStates.IMPORT_AT_ITERATION_END_WITH_ERRORS\n        )\n    #### elif working_state in {\n    ####     ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION,\n    ####     ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS,\n    ####     ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS,\n    #### }:\n    else:\n        end_state = (\n            ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION\n            if (number_of_conflicts == 0)\n            else ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\n        )\n\n    # Lock status file in order to update project status.\n    with FileLock(str(DATA_DIRECTORY / project_id / \"status.json.lock\")):\n        update_project_status(\n            project_id=project_id,\n            task_progression=None,\n            task_detail=None,\n            state=end_state,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/backgroundtasks/#cognitivefactory.interactive_clustering_gui.backgroundtasks.update_project_status","title":"<code>update_project_status(project_id, task_progression, task_detail, state=None)</code>","text":"<p>Update project status during task.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The ID of the project.</p> required <code>task_progression</code> <code>Optional[int]</code> <p>The progression of the updated task.</p> required <code>task_detail</code> <code>Optional[str]</code> <p>The detail of the updated task.</p> required <code>state</code> <code>Optional[ICGUIStates]</code> <p>The state of the application. Unchanged if <code>None</code>. Defaults to <code>None</code>.</p> <code>None</code> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\backgroundtasks.py</code> <pre><code>def update_project_status(\n    project_id: str,\n    task_progression: Optional[int],\n    task_detail: Optional[str],\n    state: Optional[ICGUIStates] = None,\n) -&gt; None:\n    \"\"\"\n    Update project status during task.\n\n    Args:\n        project_id (str): The ID of the project.\n        task_progression (Optional[int]): The progression of the updated task.\n        task_detail (Optional[str]): The detail of the updated task.\n        state (Optional[ICGUIStates], optional): The state of the application. Unchanged if `None`. Defaults to `None`.\n    \"\"\"\n\n    # Load status file.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"r\") as status_fileobject_r:\n        project_status: Dict[str, Any] = json.load(status_fileobject_r)\n\n    # Update status.\n    project_status[\"task\"] = (\n        {\n            \"progression\": task_progression,\n            \"detail\": task_detail,\n        }\n        if (task_progression is not None)\n        else None\n    )\n    project_status[\"state\"] = project_status[\"state\"] if (state is None) else state\n\n    # Store status.\n    with open(DATA_DIRECTORY / project_id / \"status.json\", \"w\") as status_fileobject_w:\n        json.dump(\n            project_status,\n            status_fileobject_w,\n            indent=4,\n        )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/cli/","title":"cli","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.cli</li> <li>Description:  Module that contains the command line application.</li> <li>Author:       Erwan Schild</li> <li>Created:      22/10/2021</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul> <p>Why does this file exist, and why not put this in <code>__main__</code>?</p> <p>You might be tempted to import things from <code>__main__</code> later, but that will cause problems: the code will get executed twice: - When you run <code>python -m cognitivefactory.interactive_clustering_gui</code> python will execute <code>__main__.py</code> as a script. That means there won't be any <code>cognitivefactory.interactive_clustering_gui.__main__</code> in <code>sys.modules</code>. - When you import <code>__main__</code> it will get executed again (as a module) because there's no <code>cognitivefactory.interactive_clustering_gui.__main__</code> in <code>sys.modules</code>.</p>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/cli/#cognitivefactory.interactive_clustering_gui.cli.get_parser","title":"<code>get_parser()</code>","text":"<p>Define possible arguments of the CLI argument parser.</p> <p>Returns:</p> Type Description <code>ArgumentParser</code> <p>An argparse parser.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"\n    Define possible arguments of the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        prog=\"cognitivefactory-interactive-clustering-gui\",\n        description=\"A web application designed for NLP data annotation using Interactive Clustering methodology.\",\n        epilog=\"For more details, https://cognitivefactory.github.io/interactive-clustering-gui/\",\n    )\n    parser.add_argument(\n        \"--host\",\n        type=str,\n        default=\"127.0.0.1\",\n        help=\"The host to bind. Defaults to `127.0.0.1`.\",\n    )\n    parser.add_argument(\n        \"--port\",\n        type=int,\n        default=8080,\n        help=\"The port to use. Defaults to `8080`.\",\n    )\n    parser.add_argument(\n        \"--log-level\",\n        type=str,\n        choices=[\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\"],\n        default=\"info\",\n        help=\"The log level. Defaults to `info`.\",\n    )\n    return parser\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/cli/#cognitivefactory.interactive_clustering_gui.cli.main","title":"<code>main(args=None)</code>","text":"<p>Run the main program.</p> <p>This function is executed when you type <code>cognitivefactory-interactive-clustering-gui</code> or <code>python -m cognitivefactory.interactive_clustering_gui</code>.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Optional[List[str]]</code> <p>Arguments passed from the command line.</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>A default exit code.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\cli.py</code> <pre><code>def main(args: Optional[List[str]] = None) -&gt; int:\n    \"\"\"\n    Run the main program.\n\n    This function is executed when you type `cognitivefactory-interactive-clustering-gui` or `python -m cognitivefactory.interactive_clustering_gui`.\n\n    Args:\n        args: Arguments passed from the command line.\n\n    Returns:\n        A default exit code.\n    \"\"\"\n    # Parse CLI arguments.\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n\n    # Config the serveur.\n    config = Config(  # pragma: nocover\n        \"cognitivefactory.interactive_clustering_gui.app:app\",\n        host=opts.host,\n        port=opts.port,\n        log_level=opts.log_level,\n    )\n    server = Server(config)  # pragma: nocover\n\n    # Launch the server.\n    server.run()  # pragma: nocover\n\n    # Return a default exit code.\n    return 0  # pragma: nocover\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/","title":"models","text":"<p>Interactive Clustering GUI package.</p> <p>Web application for Interactive Clustering methodology</p>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/queries/","title":"queries","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.models.queries</li> <li>Description:  Definition of model parameters required to define query parameters of interactive clustering.</li> <li>Author:       Erwan Schild</li> <li>Created:      07/02/2022</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/queries/#cognitivefactory.interactive_clustering_gui.models.queries.ConstraintsSortOptions","title":"<code>ConstraintsSortOptions</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available options for constraints sort.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\queries.py</code> <pre><code>class ConstraintsSortOptions(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available options for constraints sort.\"\"\"\n\n    ID: str = \"id\"\n    TEXT: str = \"text\"\n    CONSTRAINT_TYPE: str = \"constraint_type\"\n    DATE_OF_UPDATE: str = \"date_of_update\"\n    ITERATION_OF_SAMPLING: str = \"iteration_of_sampling\"\n    TO_ANNOTATE: str = \"to_annotate\"\n    TO_REVIEW: str = \"to_review\"\n    TO_FIX_CONFLICT: str = \"to_fix_conflict\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/queries/#cognitivefactory.interactive_clustering_gui.models.queries.ConstraintsValues","title":"<code>ConstraintsValues</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available constraints values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\queries.py</code> <pre><code>class ConstraintsValues(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available constraints values.\"\"\"\n\n    MUST_LINK: str = \"MUST_LINK\"\n    CANNOT_LINK: str = \"CANNOT_LINK\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/queries/#cognitivefactory.interactive_clustering_gui.models.queries.TextsSortOptions","title":"<code>TextsSortOptions</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available options for texts sort.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\queries.py</code> <pre><code>class TextsSortOptions(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available options for texts sort.\"\"\"\n\n    ID: str = \"id\"\n    ALPHABETICAL: str = \"alphabetical\"\n    IS_DELETED: str = \"is_deleted\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/","title":"settings","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.models.settings</li> <li>Description:  Definition of model parameters required to define settings of interactive clustering.</li> <li>Author:       Erwan Schild</li> <li>Created:      16/12/2021</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusterRestriction","title":"<code>ClusterRestriction</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available cluster restrictions for custom sampling algorithm.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class ClusterRestriction(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available cluster restrictions for custom sampling algorithm.\"\"\"\n\n    SAME_CLUSTER: str = \"same_cluster\"\n    DIFFERENT_CLUSTERS: str = \"different_clusters\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringAlgorithmEnum","title":"<code>ClusteringAlgorithmEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available clustering algorithms.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class ClusteringAlgorithmEnum(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available clustering algorithms.\"\"\"\n\n    KMEANS: str = \"kmeans\"\n    HIERARCHICAL: str = \"hierarchical\"\n    SPECTRAL: str = \"spectral\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel","title":"<code>ClusteringSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body model for clustering settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class ClusteringSettingsModel(BaseModel):\n    \"\"\"The body model for clustering settings.\"\"\"\n\n    # Parameters.\n    algorithm: ClusteringAlgorithmEnum\n    random_seed: int\n    nb_clusters: int\n    init_kargs: Union[None, KmeansInitSettingsModel, HierarchicalInitSettingsModel, SpectralInitSettingsModel]\n\n    @validator(\"random_seed\")\n    @classmethod\n    def validate_random_seed(cls, value: int) -&gt; int:\n        \"\"\"The validation of random_seed settings.\n\n        Args:\n            value (int): The value of random_seed setting.\n\n        Raises:\n            ValueError: if `random_seed` is incorrectly set.\n\n        Returns:\n            int: The value of random_seed setting.\n        \"\"\"\n        if value &lt; 0:\n            raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n        return value\n\n    @validator(\"nb_clusters\")\n    @classmethod\n    def validate_nb_clusters(cls, value: int) -&gt; int:\n        \"\"\"The validation of nb_clusters settings.\n\n        Args:\n            value (int): The value of nb_clusters setting.\n\n        Raises:\n            ValueError: if `nb_clusters` is incorrectly set.\n\n        Returns:\n            int: The value of nb_clusters setting.\n        \"\"\"\n        if value &lt; 2:\n            raise ValueError(\"`nb_clusters` must be greater than or equal to 2.\")\n        return value\n\n    @root_validator\n    @classmethod\n    def validate_clustering_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"The validation of clustering settings.\n\n        Args:\n            values (Dict[str, Any]): The values of clustering settings.\n\n        Raises:\n            ValueError: if `algorithm` and `init_kargs` are incompatible.\n\n        Returns:\n            Dict[str, Any]: The validated values of clustering settings.\n        \"\"\"\n\n        # Case of no clustering algorithm.\n        if \"algorithm\" not in values.keys():\n            raise ValueError(\"The parameter `algorithm` is required.\")\n\n        # Case of kmeans clustering algorithm.\n        if values[\"algorithm\"] == ClusteringAlgorithmEnum.KMEANS:\n            # Case of no init parameters.\n            if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n                raise ValueError(\n                    \"A dictionary of initialization (`init_kargs`) is required when algorithm is `kmeans`.\"\n                )\n            # Case of wrong type init parameters.\n            if not isinstance(values[\"init_kargs\"], KmeansInitSettingsModel):\n                raise ValueError(\n                    \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `kmeans`.\"\n                )\n\n        # Case of hierarchical clustering algorithm.\n        if values[\"algorithm\"] == ClusteringAlgorithmEnum.HIERARCHICAL:\n            # Case of no init parameters.\n            if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n                raise ValueError(\n                    \"A dictionary of initialization (`init_kargs`) is required when algorithm is `hierarchical`.\"\n                )\n            # Case of wrong type init parameters.\n            if not isinstance(values[\"init_kargs\"], HierarchicalInitSettingsModel):\n                raise ValueError(\n                    \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `hierarchical`.\"\n                )\n\n        # Case of spectral clustering algorithm.\n        if values[\"algorithm\"] == ClusteringAlgorithmEnum.SPECTRAL:\n            # Case of no init parameters.\n            if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n                raise ValueError(\n                    \"A dictionary of initialization (`init_kargs`) is required when algorithm is `spectral`.\"\n                )\n            # Case of wrong type init parameters.\n            if not isinstance(values[\"init_kargs\"], SpectralInitSettingsModel):\n                raise ValueError(\n                    \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `spectral`.\"\n                )\n\n        # Return validated values of sampling settings.\n        return values\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"algorithm\": self.algorithm.value,\n            \"random_seed\": self.random_seed,\n            \"nb_clusters\": self.nb_clusters,\n            \"init_kargs\": self.init_kargs.to_dict() if (self.init_kargs is not None) else {},\n        }\n\n    # Config for schema.\n    class Config:  # noqa: WPS431 (nested class)\n        \"\"\"Configuration for body model of clustering settings.\"\"\"\n\n        schema_extra = {\n            \"example\": {\n                \"algorithm\": (\n                    ClusteringAlgorithmEnum.KMEANS\n                    + \"|\"\n                    + ClusteringAlgorithmEnum.HIERARCHICAL\n                    + \"|\"\n                    + ClusteringAlgorithmEnum.SPECTRAL\n                ),\n                \"random_seed\": 42,\n                \"nb_clusters\": 2,\n                \"init_kargs\": {\n                    \"!!!SPECIFIC: 'algorithm'=='kmeans'\": {\n                        \"model\": KmeansModelEnum.COP,\n                        \"max_iteration\": 150,\n                        \"tolerance\": 0.0001,\n                    },\n                    \"!!!SPECIFIC: 'algorithm'=='hierarchical'\": {\n                        \"linkage\": (\n                            HierarchicalLinkageEnum.WARD\n                            + \"|\"\n                            + HierarchicalLinkageEnum.AVERAGE\n                            + \"|\"\n                            + HierarchicalLinkageEnum.COMPLETE\n                            + \"|\"\n                            + HierarchicalLinkageEnum.SINGLE\n                        ),\n                    },\n                    \"!!!SPECIFIC: 'algorithm'=='spectral'\": {\n                        \"model\": SpectralModelEnum.SPEC,\n                        \"nb_components\": None,\n                    },\n                },\n            }\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel.Config","title":"<code>Config</code>","text":"<p>Configuration for body model of clustering settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class Config:  # noqa: WPS431 (nested class)\n    \"\"\"Configuration for body model of clustering settings.\"\"\"\n\n    schema_extra = {\n        \"example\": {\n            \"algorithm\": (\n                ClusteringAlgorithmEnum.KMEANS\n                + \"|\"\n                + ClusteringAlgorithmEnum.HIERARCHICAL\n                + \"|\"\n                + ClusteringAlgorithmEnum.SPECTRAL\n            ),\n            \"random_seed\": 42,\n            \"nb_clusters\": 2,\n            \"init_kargs\": {\n                \"!!!SPECIFIC: 'algorithm'=='kmeans'\": {\n                    \"model\": KmeansModelEnum.COP,\n                    \"max_iteration\": 150,\n                    \"tolerance\": 0.0001,\n                },\n                \"!!!SPECIFIC: 'algorithm'=='hierarchical'\": {\n                    \"linkage\": (\n                        HierarchicalLinkageEnum.WARD\n                        + \"|\"\n                        + HierarchicalLinkageEnum.AVERAGE\n                        + \"|\"\n                        + HierarchicalLinkageEnum.COMPLETE\n                        + \"|\"\n                        + HierarchicalLinkageEnum.SINGLE\n                    ),\n                },\n                \"!!!SPECIFIC: 'algorithm'=='spectral'\": {\n                    \"model\": SpectralModelEnum.SPEC,\n                    \"nb_components\": None,\n                },\n            },\n        }\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"algorithm\": self.algorithm.value,\n        \"random_seed\": self.random_seed,\n        \"nb_clusters\": self.nb_clusters,\n        \"init_kargs\": self.init_kargs.to_dict() if (self.init_kargs is not None) else {},\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel.validate_clustering_settings","title":"<code>validate_clustering_settings(values)</code>  <code>classmethod</code>","text":"<p>The validation of clustering settings.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Dict[str, Any]</code> <p>The values of clustering settings.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>algorithm</code> and <code>init_kargs</code> are incompatible.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The validated values of clustering settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@root_validator\n@classmethod\ndef validate_clustering_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"The validation of clustering settings.\n\n    Args:\n        values (Dict[str, Any]): The values of clustering settings.\n\n    Raises:\n        ValueError: if `algorithm` and `init_kargs` are incompatible.\n\n    Returns:\n        Dict[str, Any]: The validated values of clustering settings.\n    \"\"\"\n\n    # Case of no clustering algorithm.\n    if \"algorithm\" not in values.keys():\n        raise ValueError(\"The parameter `algorithm` is required.\")\n\n    # Case of kmeans clustering algorithm.\n    if values[\"algorithm\"] == ClusteringAlgorithmEnum.KMEANS:\n        # Case of no init parameters.\n        if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n            raise ValueError(\n                \"A dictionary of initialization (`init_kargs`) is required when algorithm is `kmeans`.\"\n            )\n        # Case of wrong type init parameters.\n        if not isinstance(values[\"init_kargs\"], KmeansInitSettingsModel):\n            raise ValueError(\n                \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `kmeans`.\"\n            )\n\n    # Case of hierarchical clustering algorithm.\n    if values[\"algorithm\"] == ClusteringAlgorithmEnum.HIERARCHICAL:\n        # Case of no init parameters.\n        if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n            raise ValueError(\n                \"A dictionary of initialization (`init_kargs`) is required when algorithm is `hierarchical`.\"\n            )\n        # Case of wrong type init parameters.\n        if not isinstance(values[\"init_kargs\"], HierarchicalInitSettingsModel):\n            raise ValueError(\n                \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `hierarchical`.\"\n            )\n\n    # Case of spectral clustering algorithm.\n    if values[\"algorithm\"] == ClusteringAlgorithmEnum.SPECTRAL:\n        # Case of no init parameters.\n        if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n            raise ValueError(\n                \"A dictionary of initialization (`init_kargs`) is required when algorithm is `spectral`.\"\n            )\n        # Case of wrong type init parameters.\n        if not isinstance(values[\"init_kargs\"], SpectralInitSettingsModel):\n            raise ValueError(\n                \"The dictionary of initialization (`init_kargs`) is incompatible with algorithm `spectral`.\"\n            )\n\n    # Return validated values of sampling settings.\n    return values\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel.validate_nb_clusters","title":"<code>validate_nb_clusters(value)</code>  <code>classmethod</code>","text":"<p>The validation of nb_clusters settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of nb_clusters setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>nb_clusters</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of nb_clusters setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"nb_clusters\")\n@classmethod\ndef validate_nb_clusters(cls, value: int) -&gt; int:\n    \"\"\"The validation of nb_clusters settings.\n\n    Args:\n        value (int): The value of nb_clusters setting.\n\n    Raises:\n        ValueError: if `nb_clusters` is incorrectly set.\n\n    Returns:\n        int: The value of nb_clusters setting.\n    \"\"\"\n    if value &lt; 2:\n        raise ValueError(\"`nb_clusters` must be greater than or equal to 2.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ClusteringSettingsModel.validate_random_seed","title":"<code>validate_random_seed(value)</code>  <code>classmethod</code>","text":"<p>The validation of random_seed settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of random_seed setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>random_seed</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of random_seed setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"random_seed\")\n@classmethod\ndef validate_random_seed(cls, value: int) -&gt; int:\n    \"\"\"The validation of random_seed settings.\n\n    Args:\n        value (int): The value of random_seed setting.\n\n    Raises:\n        ValueError: if `random_seed` is incorrectly set.\n\n    Returns:\n        int: The value of random_seed setting.\n    \"\"\"\n    if value &lt; 0:\n        raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.CustomSamplingInitSettingsModel","title":"<code>CustomSamplingInitSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body submodel for custom sampling initialization settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class CustomSamplingInitSettingsModel(BaseModel):\n    \"\"\"The body submodel for custom sampling initialization settings.\"\"\"\n\n    # Parameters.\n    clusters_restriction: ClusterRestriction\n    distance_restriction: DistanceRestriction\n    without_inferred_constraints: bool\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"clusters_restriction\": self.clusters_restriction.value,\n            \"distance_restriction\": self.distance_restriction.value,\n            \"without_inferred_constraints\": self.without_inferred_constraints,\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.CustomSamplingInitSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"clusters_restriction\": self.clusters_restriction.value,\n        \"distance_restriction\": self.distance_restriction.value,\n        \"without_inferred_constraints\": self.without_inferred_constraints,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.DistanceRestriction","title":"<code>DistanceRestriction</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available distance restrictions for custom sampling algorithm.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class DistanceRestriction(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available distance restrictions for custom sampling algorithm.\"\"\"\n\n    CLOSEST_NEIGHBORS: str = \"closest_neighbors\"\n    FARTHEST_NEIGHBORS: str = \"farthest_neighbors\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.HierarchicalInitSettingsModel","title":"<code>HierarchicalInitSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body submodel for hierarchical instantiation settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class HierarchicalInitSettingsModel(BaseModel):\n    \"\"\"The body submodel for hierarchical instantiation settings.\"\"\"\n\n    # Parameters.\n    linkage: HierarchicalLinkageEnum\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"linkage\": self.linkage.value,\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.HierarchicalInitSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"linkage\": self.linkage.value,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.HierarchicalLinkageEnum","title":"<code>HierarchicalLinkageEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available hierarchical linkages.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class HierarchicalLinkageEnum(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available hierarchical linkages.\"\"\"\n\n    AVERAGE: str = \"average\"\n    COMPLETE: str = \"complete\"\n    SINGLE: str = \"single\"\n    WARD: str = \"ward\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ICGUISettings","title":"<code>ICGUISettings</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available Settings for Interactive Clustering GUI.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class ICGUISettings(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available Settings for Interactive Clustering GUI.\"\"\"\n\n    PREPROCESSING: str = \"preprocessing\"\n    VECTORIZATION: str = \"vectorization\"\n    SAMPLING: str = \"sampling\"\n    CLUSTERING: str = \"clustering\"\n\n    @classmethod\n    def contains(cls, value: Any) -&gt; bool:\n        \"\"\"Test if value is in this enumeration.\n\n        Args:\n            value (Any): A value.\n\n        Returns:\n            bool: `True` if the value is in the enumeration.\n        \"\"\"\n        return value in cls._value2member_map_\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.ICGUISettings.contains","title":"<code>contains(value)</code>  <code>classmethod</code>","text":"<p>Test if value is in this enumeration.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>A value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the value is in the enumeration.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@classmethod\ndef contains(cls, value: Any) -&gt; bool:\n    \"\"\"Test if value is in this enumeration.\n\n    Args:\n        value (Any): A value.\n\n    Returns:\n        bool: `True` if the value is in the enumeration.\n    \"\"\"\n    return value in cls._value2member_map_\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.KmeansInitSettingsModel","title":"<code>KmeansInitSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body submodel for kmeans instantiation settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class KmeansInitSettingsModel(BaseModel):\n    \"\"\"The body submodel for kmeans instantiation settings.\"\"\"\n\n    # Parameters.\n    model: KmeansModelEnum\n    max_iteration: int\n    tolerance: float\n\n    @validator(\"max_iteration\")\n    @classmethod\n    def validate_max_iteration(cls, value: int) -&gt; int:\n        \"\"\"The validation of max_iteration settings.\n\n        Args:\n            value (int): The value of max_iteration setting.\n\n        Raises:\n            ValueError: if `max_iteration` is incorrectly set.\n\n        Returns:\n            int: The value of max_iteration setting.\n        \"\"\"\n        if value &lt; 1:\n            raise ValueError(\"`max_iteration` must be greater than or equal to 1.\")\n        return value\n\n    @validator(\"tolerance\")\n    @classmethod\n    def validate_tolerance(cls, value: float) -&gt; float:\n        \"\"\"The validation of tolerance settings.\n\n        Args:\n            value (float): The value of tolerance setting.\n\n        Raises:\n            ValueError: if `tolerance` is incorrectly set.\n\n        Returns:\n            float: The value of tolerance setting.\n        \"\"\"\n        if value &lt; 0:\n            raise ValueError(\"The `tolerance` must be greater than 0.0.\")\n        return value\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"model\": self.model.value,\n            \"max_iteration\": self.max_iteration,\n            \"tolerance\": self.tolerance,\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.KmeansInitSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"model\": self.model.value,\n        \"max_iteration\": self.max_iteration,\n        \"tolerance\": self.tolerance,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.KmeansInitSettingsModel.validate_max_iteration","title":"<code>validate_max_iteration(value)</code>  <code>classmethod</code>","text":"<p>The validation of max_iteration settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of max_iteration setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>max_iteration</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of max_iteration setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"max_iteration\")\n@classmethod\ndef validate_max_iteration(cls, value: int) -&gt; int:\n    \"\"\"The validation of max_iteration settings.\n\n    Args:\n        value (int): The value of max_iteration setting.\n\n    Raises:\n        ValueError: if `max_iteration` is incorrectly set.\n\n    Returns:\n        int: The value of max_iteration setting.\n    \"\"\"\n    if value &lt; 1:\n        raise ValueError(\"`max_iteration` must be greater than or equal to 1.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.KmeansInitSettingsModel.validate_tolerance","title":"<code>validate_tolerance(value)</code>  <code>classmethod</code>","text":"<p>The validation of tolerance settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The value of tolerance setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>tolerance</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The value of tolerance setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"tolerance\")\n@classmethod\ndef validate_tolerance(cls, value: float) -&gt; float:\n    \"\"\"The validation of tolerance settings.\n\n    Args:\n        value (float): The value of tolerance setting.\n\n    Raises:\n        ValueError: if `tolerance` is incorrectly set.\n\n    Returns:\n        float: The value of tolerance setting.\n    \"\"\"\n    if value &lt; 0:\n        raise ValueError(\"The `tolerance` must be greater than 0.0.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.KmeansModelEnum","title":"<code>KmeansModelEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available kmeans models.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class KmeansModelEnum(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available kmeans models.\"\"\"\n\n    COP: str = \"COP\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.PreprocessingSettingsModel","title":"<code>PreprocessingSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body model for preprocessing settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class PreprocessingSettingsModel(BaseModel):\n    \"\"\"The body model for preprocessing settings.\"\"\"\n\n    # Parameters.\n    apply_stopwords_deletion: bool\n    apply_parsing_filter: bool\n    apply_lemmatization: bool\n    spacy_language_model: PreprocessingSpacyLanguageModel\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"apply_stopwords_deletion\": self.apply_stopwords_deletion,\n            \"apply_parsing_filter\": self.apply_parsing_filter,\n            \"apply_lemmatization\": self.apply_lemmatization,\n            \"spacy_language_model\": self.spacy_language_model.value,\n        }\n\n    # Config for schema.\n    class Config:  # noqa: WPS431 (nested class)\n        \"\"\"Configuration for body model of preprocessing settings.\"\"\"\n\n        schema_extra = {\n            \"example\": {\n                \"apply_stopwords_deletion\": False,\n                \"apply_parsing_filter\": False,\n                \"apply_lemmatization\": False,\n                \"spacy_language_model\": PreprocessingSpacyLanguageModel.FR_CORE_NEWS_MD,\n            }\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.PreprocessingSettingsModel.Config","title":"<code>Config</code>","text":"<p>Configuration for body model of preprocessing settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class Config:  # noqa: WPS431 (nested class)\n    \"\"\"Configuration for body model of preprocessing settings.\"\"\"\n\n    schema_extra = {\n        \"example\": {\n            \"apply_stopwords_deletion\": False,\n            \"apply_parsing_filter\": False,\n            \"apply_lemmatization\": False,\n            \"spacy_language_model\": PreprocessingSpacyLanguageModel.FR_CORE_NEWS_MD,\n        }\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.PreprocessingSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"apply_stopwords_deletion\": self.apply_stopwords_deletion,\n        \"apply_parsing_filter\": self.apply_parsing_filter,\n        \"apply_lemmatization\": self.apply_lemmatization,\n        \"spacy_language_model\": self.spacy_language_model.value,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.PreprocessingSpacyLanguageModel","title":"<code>PreprocessingSpacyLanguageModel</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available spacy language model name.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class PreprocessingSpacyLanguageModel(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available spacy language model name.\"\"\"\n\n    FR_CORE_NEWS_MD: str = \"fr_core_news_md\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingAlgorithm","title":"<code>SamplingAlgorithm</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available sampling algorithms.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class SamplingAlgorithm(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available sampling algorithms.\"\"\"\n\n    RANDOM: str = \"random\"\n    RANDOM_IN_SAME_CLUSTER: str = \"random_in_same_cluster\"\n    FARTHEST_IN_SAME_CLUSTER: str = \"farthest_in_same_cluster\"\n    CLOSEST_IN_DIFFERENT_CLUSTERS: str = \"closest_in_different_clusters\"\n    CUSTOM: str = \"custom\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel","title":"<code>SamplingSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Abstract body model for sampling settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class SamplingSettingsModel(BaseModel):\n    \"\"\"Abstract body model for sampling settings.\"\"\"\n\n    # Parameters.\n    algorithm: SamplingAlgorithm\n    random_seed: int\n    nb_to_select: int\n    init_kargs: Optional[CustomSamplingInitSettingsModel]\n\n    @validator(\"random_seed\")\n    @classmethod\n    def validate_random_seed(cls, value: int) -&gt; int:\n        \"\"\"The validation of random_seed settings.\n\n        Args:\n            value (int): The value of random_seed setting.\n\n        Raises:\n            ValueError: if `random_seed` is incorrectly set.\n\n        Returns:\n            int: The value of random_seed setting.\n        \"\"\"\n        if value &lt; 0:\n            raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n        return value\n\n    @validator(\"nb_to_select\")\n    @classmethod\n    def validate_nb_to_select(cls, value: int) -&gt; int:\n        \"\"\"The validation of nb_to_select settings.\n\n        Args:\n            value (int): The value of nb_to_select setting.\n\n        Raises:\n            ValueError: if `nb_to_select` is incorrectly set.\n\n        Returns:\n            int: The value of nb_to_select setting.\n        \"\"\"\n        if value &lt; 1:\n            raise ValueError(\"`nb_to_select` must be greater than or equal to 1.\")\n        return value\n\n    @root_validator\n    @classmethod\n    def validate_sampling_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"The validation of sampling settings.\n\n        Args:\n            values (Dict[str, Any]): The values of sampling settings.\n\n        Raises:\n            ValueError: if `algorithm` and `init_kargs` are incompatible.\n\n        Returns:\n            Dict[str, Any]: The validated values of sampling settings.\n        \"\"\"\n\n        # Case of no sampling algorithm.\n        if \"algorithm\" not in values.keys():\n            raise ValueError(\"The parameter `algorithm` is required.\")\n\n        # Case of custom sampling algorithm.\n        if values[\"algorithm\"] == SamplingAlgorithm.CUSTOM:\n            if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n                raise ValueError(\n                    \"A dictionary of initialization (`init_kargs`) is required when algorithm is `custom`.\"\n                )\n\n        # Case of predefinite sampling algorithms.\n        else:\n            if (\"init_kargs\" in values.keys()) and (values[\"init_kargs\"] is not None):\n                raise ValueError(\n                    \"No dictionary of initialization (`init_kargs`) is required when algorithm is different from `custom`.\"\n                )\n            values[\"init_kargs\"] = None\n\n        # Return validated values of sampling settings.\n        return values\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"algorithm\": self.algorithm.value,\n            \"random_seed\": self.random_seed,\n            \"nb_to_select\": self.nb_to_select,\n            \"init_kargs\": self.init_kargs.to_dict() if (self.init_kargs is not None) else None,\n        }\n\n    # Config for schema.\n    class Config:  # noqa: WPS431 (nested class)\n        \"\"\"Configuration for body model of sampling settings.\"\"\"\n\n        schema_extra = {\n            \"example\": {\n                \"algorithm\": (\n                    SamplingAlgorithm.RANDOM\n                    + \"|\"\n                    + SamplingAlgorithm.RANDOM_IN_SAME_CLUSTER\n                    + \"|\"\n                    + SamplingAlgorithm.CLOSEST_IN_DIFFERENT_CLUSTERS\n                    + \"|\"\n                    + SamplingAlgorithm.FARTHEST_IN_SAME_CLUSTER\n                    + \"|\"\n                    + SamplingAlgorithm.CUSTOM\n                ),\n                \"random_seed\": 42,\n                \"nb_to_select\": 25,\n                \"!!!SPECIFIC: 'algorithm'=='custom'\": {\n                    \"init_kargs\": {\n                        \"clusters_restriction\": (\n                            ClusterRestriction.SAME_CLUSTER + \"|\" + ClusterRestriction.DIFFERENT_CLUSTERS\n                        ),\n                        \"distance_restriction\": (\n                            DistanceRestriction.CLOSEST_NEIGHBORS + \"|\" + DistanceRestriction.FARTHEST_NEIGHBORS\n                        ),\n                        \"without_inferred_constraints\": True,\n                    },\n                },\n            }\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel.Config","title":"<code>Config</code>","text":"<p>Configuration for body model of sampling settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class Config:  # noqa: WPS431 (nested class)\n    \"\"\"Configuration for body model of sampling settings.\"\"\"\n\n    schema_extra = {\n        \"example\": {\n            \"algorithm\": (\n                SamplingAlgorithm.RANDOM\n                + \"|\"\n                + SamplingAlgorithm.RANDOM_IN_SAME_CLUSTER\n                + \"|\"\n                + SamplingAlgorithm.CLOSEST_IN_DIFFERENT_CLUSTERS\n                + \"|\"\n                + SamplingAlgorithm.FARTHEST_IN_SAME_CLUSTER\n                + \"|\"\n                + SamplingAlgorithm.CUSTOM\n            ),\n            \"random_seed\": 42,\n            \"nb_to_select\": 25,\n            \"!!!SPECIFIC: 'algorithm'=='custom'\": {\n                \"init_kargs\": {\n                    \"clusters_restriction\": (\n                        ClusterRestriction.SAME_CLUSTER + \"|\" + ClusterRestriction.DIFFERENT_CLUSTERS\n                    ),\n                    \"distance_restriction\": (\n                        DistanceRestriction.CLOSEST_NEIGHBORS + \"|\" + DistanceRestriction.FARTHEST_NEIGHBORS\n                    ),\n                    \"without_inferred_constraints\": True,\n                },\n            },\n        }\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"algorithm\": self.algorithm.value,\n        \"random_seed\": self.random_seed,\n        \"nb_to_select\": self.nb_to_select,\n        \"init_kargs\": self.init_kargs.to_dict() if (self.init_kargs is not None) else None,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel.validate_nb_to_select","title":"<code>validate_nb_to_select(value)</code>  <code>classmethod</code>","text":"<p>The validation of nb_to_select settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of nb_to_select setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>nb_to_select</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of nb_to_select setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"nb_to_select\")\n@classmethod\ndef validate_nb_to_select(cls, value: int) -&gt; int:\n    \"\"\"The validation of nb_to_select settings.\n\n    Args:\n        value (int): The value of nb_to_select setting.\n\n    Raises:\n        ValueError: if `nb_to_select` is incorrectly set.\n\n    Returns:\n        int: The value of nb_to_select setting.\n    \"\"\"\n    if value &lt; 1:\n        raise ValueError(\"`nb_to_select` must be greater than or equal to 1.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel.validate_random_seed","title":"<code>validate_random_seed(value)</code>  <code>classmethod</code>","text":"<p>The validation of random_seed settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of random_seed setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>random_seed</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of random_seed setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"random_seed\")\n@classmethod\ndef validate_random_seed(cls, value: int) -&gt; int:\n    \"\"\"The validation of random_seed settings.\n\n    Args:\n        value (int): The value of random_seed setting.\n\n    Raises:\n        ValueError: if `random_seed` is incorrectly set.\n\n    Returns:\n        int: The value of random_seed setting.\n    \"\"\"\n    if value &lt; 0:\n        raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SamplingSettingsModel.validate_sampling_settings","title":"<code>validate_sampling_settings(values)</code>  <code>classmethod</code>","text":"<p>The validation of sampling settings.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Dict[str, Any]</code> <p>The values of sampling settings.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>algorithm</code> and <code>init_kargs</code> are incompatible.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The validated values of sampling settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@root_validator\n@classmethod\ndef validate_sampling_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"The validation of sampling settings.\n\n    Args:\n        values (Dict[str, Any]): The values of sampling settings.\n\n    Raises:\n        ValueError: if `algorithm` and `init_kargs` are incompatible.\n\n    Returns:\n        Dict[str, Any]: The validated values of sampling settings.\n    \"\"\"\n\n    # Case of no sampling algorithm.\n    if \"algorithm\" not in values.keys():\n        raise ValueError(\"The parameter `algorithm` is required.\")\n\n    # Case of custom sampling algorithm.\n    if values[\"algorithm\"] == SamplingAlgorithm.CUSTOM:\n        if (\"init_kargs\" not in values.keys()) or (values[\"init_kargs\"] is None):\n            raise ValueError(\n                \"A dictionary of initialization (`init_kargs`) is required when algorithm is `custom`.\"\n            )\n\n    # Case of predefinite sampling algorithms.\n    else:\n        if (\"init_kargs\" in values.keys()) and (values[\"init_kargs\"] is not None):\n            raise ValueError(\n                \"No dictionary of initialization (`init_kargs`) is required when algorithm is different from `custom`.\"\n            )\n        values[\"init_kargs\"] = None\n\n    # Return validated values of sampling settings.\n    return values\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SpectralInitSettingsModel","title":"<code>SpectralInitSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body submodel for spectral instantiation settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class SpectralInitSettingsModel(BaseModel):\n    \"\"\"The body submodel for spectral instantiation settings.\"\"\"\n\n    # Parameters.\n    model: SpectralModelEnum = SpectralModelEnum.SPEC\n    nb_components: Optional[int] = None\n\n    @validator(\"nb_components\")\n    @classmethod\n    def validate_nb_components(cls, value: Optional[int]) -&gt; Optional[int]:\n        \"\"\"The validation of nb_components settings.\n\n        Args:\n            value (Optional[int]): The value of nb_components setting.\n\n        Raises:\n            ValueError: if `nb_components` is incorrectly set.\n\n        Returns:\n            Optional[int]: The value of nb_components setting.\n        \"\"\"\n        if (value is not None) and (value &lt; 2):\n            raise ValueError(\"`nb_components` must be `None` or greater than or equal to 2.\")\n        return value\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"model\": self.model.value,\n            \"nb_components\": self.nb_components,\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SpectralInitSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"model\": self.model.value,\n        \"nb_components\": self.nb_components,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SpectralInitSettingsModel.validate_nb_components","title":"<code>validate_nb_components(value)</code>  <code>classmethod</code>","text":"<p>The validation of nb_components settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[int]</code> <p>The value of nb_components setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>nb_components</code> is incorrectly set.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Optional[int]: The value of nb_components setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"nb_components\")\n@classmethod\ndef validate_nb_components(cls, value: Optional[int]) -&gt; Optional[int]:\n    \"\"\"The validation of nb_components settings.\n\n    Args:\n        value (Optional[int]): The value of nb_components setting.\n\n    Raises:\n        ValueError: if `nb_components` is incorrectly set.\n\n    Returns:\n        Optional[int]: The value of nb_components setting.\n    \"\"\"\n    if (value is not None) and (value &lt; 2):\n        raise ValueError(\"`nb_components` must be `None` or greater than or equal to 2.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.SpectralModelEnum","title":"<code>SpectralModelEnum</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available spectral models.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class SpectralModelEnum(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available spectral models.\"\"\"\n\n    SPEC: str = \"SPEC\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSettingsModel","title":"<code>VectorizationSettingsModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The body model for vectorization settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class VectorizationSettingsModel(BaseModel):\n    \"\"\"The body model for vectorization settings.\"\"\"\n\n    # Parameters.\n    vectorizer_type: VectorizerType\n    spacy_language_model: Optional[VectorizationSpacyLanguageModel]\n    random_seed: int\n\n    @validator(\"random_seed\")\n    @classmethod\n    def validate_random_seed(cls, value: int) -&gt; int:\n        \"\"\"The validation of random_seed settings.\n\n        Args:\n            value (int): The value of random_seed setting.\n\n        Raises:\n            ValueError: if `random_seed` is incorrectly set.\n\n        Returns:\n            int: The value of random_seed setting.\n        \"\"\"\n        if value &lt; 0:\n            raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n        return value\n\n    @root_validator\n    @classmethod\n    def validate_vectorization_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"The validation of vectorization settings.\n\n        Args:\n            values (Dict[str, Any]): The values of vectorization settings.\n\n        Raises:\n            ValueError: if `vectorizer_type` and `spacy_language_model` are incompatible.\n\n        Returns:\n            Dict[str, Any]: The validated values of vectorization settings.\n        \"\"\"\n\n        # Case of no vectorizer.\n        if \"vectorizer_type\" not in values.keys():\n            raise ValueError(\"The parameter `vectorizer_type` is required.\")\n\n        # Case of tfidf vectorizer.\n        if values[\"vectorizer_type\"] == VectorizerType.TFIDF:\n            if (\"spacy_language_model\" in values.keys()) and (values[\"spacy_language_model\"] is not None):\n                raise ValueError(\"No spacy language model is required when vectorizer is `tfidf`.\")\n            values[\"spacy_language_model\"] = None\n\n        # Case of spacy vectorizer.\n        if values[\"vectorizer_type\"] == VectorizerType.SPACY:\n            if (\"spacy_language_model\" not in values.keys()) or (values[\"spacy_language_model\"] is None):\n                raise ValueError(\"A spacy language model is required when vectorizer is `spacy`.\")\n\n        # Return validated values of vectorization settings.\n        return values\n\n    # Export method.\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Export the model as a dictionary\n\n        Returns:\n            Dict[str, Any]: A dictionary that contains paramaters and their values.\n        \"\"\"\n        return {\n            \"vectorizer_type\": self.vectorizer_type.value,\n            \"spacy_language_model\": self.spacy_language_model.value\n            if (self.spacy_language_model is not None)\n            else None,\n            \"random_seed\": self.random_seed,\n        }\n\n    # Config for schema.\n    class Config:  # noqa: WPS431 (nested class)\n        \"\"\"Configuration for body model of vectorization settings.\"\"\"\n\n        schema_extra = {\n            \"example\": {\n                \"vectorizer_type\": (VectorizerType.TFIDF + \"|\" + VectorizerType.SPACY),\n                \"random_seed\": 42,\n                \"!!!SPECIFIC: 'vectorizer_type'=='spacy'\": {\n                    \"spacy_language_model\": VectorizationSpacyLanguageModel.FR_CORE_NEWS_MD,\n                },\n            }\n        }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSettingsModel.Config","title":"<code>Config</code>","text":"<p>Configuration for body model of vectorization settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class Config:  # noqa: WPS431 (nested class)\n    \"\"\"Configuration for body model of vectorization settings.\"\"\"\n\n    schema_extra = {\n        \"example\": {\n            \"vectorizer_type\": (VectorizerType.TFIDF + \"|\" + VectorizerType.SPACY),\n            \"random_seed\": 42,\n            \"!!!SPECIFIC: 'vectorizer_type'=='spacy'\": {\n                \"spacy_language_model\": VectorizationSpacyLanguageModel.FR_CORE_NEWS_MD,\n            },\n        }\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSettingsModel.to_dict","title":"<code>to_dict()</code>","text":"<p>Export the model as a dictionary</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary that contains paramaters and their values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Export the model as a dictionary\n\n    Returns:\n        Dict[str, Any]: A dictionary that contains paramaters and their values.\n    \"\"\"\n    return {\n        \"vectorizer_type\": self.vectorizer_type.value,\n        \"spacy_language_model\": self.spacy_language_model.value\n        if (self.spacy_language_model is not None)\n        else None,\n        \"random_seed\": self.random_seed,\n    }\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSettingsModel.validate_random_seed","title":"<code>validate_random_seed(value)</code>  <code>classmethod</code>","text":"<p>The validation of random_seed settings.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The value of random_seed setting.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>random_seed</code> is incorrectly set.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The value of random_seed setting.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@validator(\"random_seed\")\n@classmethod\ndef validate_random_seed(cls, value: int) -&gt; int:\n    \"\"\"The validation of random_seed settings.\n\n    Args:\n        value (int): The value of random_seed setting.\n\n    Raises:\n        ValueError: if `random_seed` is incorrectly set.\n\n    Returns:\n        int: The value of random_seed setting.\n    \"\"\"\n    if value &lt; 0:\n        raise ValueError(\"`random_seed` must be greater than or equal to 0.\")\n    return value\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSettingsModel.validate_vectorization_settings","title":"<code>validate_vectorization_settings(values)</code>  <code>classmethod</code>","text":"<p>The validation of vectorization settings.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>Dict[str, Any]</code> <p>The values of vectorization settings.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>vectorizer_type</code> and <code>spacy_language_model</code> are incompatible.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The validated values of vectorization settings.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>@root_validator\n@classmethod\ndef validate_vectorization_settings(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"The validation of vectorization settings.\n\n    Args:\n        values (Dict[str, Any]): The values of vectorization settings.\n\n    Raises:\n        ValueError: if `vectorizer_type` and `spacy_language_model` are incompatible.\n\n    Returns:\n        Dict[str, Any]: The validated values of vectorization settings.\n    \"\"\"\n\n    # Case of no vectorizer.\n    if \"vectorizer_type\" not in values.keys():\n        raise ValueError(\"The parameter `vectorizer_type` is required.\")\n\n    # Case of tfidf vectorizer.\n    if values[\"vectorizer_type\"] == VectorizerType.TFIDF:\n        if (\"spacy_language_model\" in values.keys()) and (values[\"spacy_language_model\"] is not None):\n            raise ValueError(\"No spacy language model is required when vectorizer is `tfidf`.\")\n        values[\"spacy_language_model\"] = None\n\n    # Case of spacy vectorizer.\n    if values[\"vectorizer_type\"] == VectorizerType.SPACY:\n        if (\"spacy_language_model\" not in values.keys()) or (values[\"spacy_language_model\"] is None):\n            raise ValueError(\"A spacy language model is required when vectorizer is `spacy`.\")\n\n    # Return validated values of vectorization settings.\n    return values\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizationSpacyLanguageModel","title":"<code>VectorizationSpacyLanguageModel</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available spacy language model name.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class VectorizationSpacyLanguageModel(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available spacy language model name.\"\"\"\n\n    FR_CORE_NEWS_MD: str = \"fr_core_news_md\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.VectorizerType","title":"<code>VectorizerType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available vectorizer type.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>class VectorizerType(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available vectorizer type.\"\"\"\n\n    TFIDF: str = \"tfidf\"\n    SPACY: str = \"spacy\"\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.default_ClusteringSettingsModel","title":"<code>default_ClusteringSettingsModel()</code>","text":"<p>Create a ClusteringSettingsModel instance with default values.</p> <p>Returns:</p> Name Type Description <code>ClusteringSettingsModel</code> <code>ClusteringSettingsModel</code> <p>A ClusteringSettingsModel instance with default values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def default_ClusteringSettingsModel() -&gt; ClusteringSettingsModel:\n    \"\"\"Create a ClusteringSettingsModel instance with default values.\n\n    Returns:\n        ClusteringSettingsModel: A ClusteringSettingsModel instance with default values.\n    \"\"\"\n    return ClusteringSettingsModel(\n        algorithm=ClusteringAlgorithmEnum.KMEANS,\n        random_seed=42,\n        nb_clusters=2,\n        init_kargs=default_KmeansInitSettingsModel(),\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.default_KmeansInitSettingsModel","title":"<code>default_KmeansInitSettingsModel()</code>","text":"<p>Create a KmeansInitSettingsModel instance with default values.</p> <p>Returns:</p> Name Type Description <code>KmeansInitSettingsModel</code> <code>KmeansInitSettingsModel</code> <p>A KmeansInitSettingsModel instance with default values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def default_KmeansInitSettingsModel() -&gt; KmeansInitSettingsModel:\n    \"\"\"Create a KmeansInitSettingsModel instance with default values.\n\n    Returns:\n        KmeansInitSettingsModel: A KmeansInitSettingsModel instance with default values.\n    \"\"\"\n    return KmeansInitSettingsModel(\n        model=KmeansModelEnum.COP,\n        max_iteration=150,\n        tolerance=0.0001,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.default_PreprocessingSettingsModel","title":"<code>default_PreprocessingSettingsModel()</code>","text":"<p>Create a PreprocessingSettingsModel instance with default values.</p> <p>Returns:</p> Name Type Description <code>PreprocessingSettingsModel</code> <code>PreprocessingSettingsModel</code> <p>A PreprocessingSettingsModel instance with default values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def default_PreprocessingSettingsModel() -&gt; PreprocessingSettingsModel:\n    \"\"\"Create a PreprocessingSettingsModel instance with default values.\n\n    Returns:\n        PreprocessingSettingsModel: A PreprocessingSettingsModel instance with default values.\n    \"\"\"\n    return PreprocessingSettingsModel(\n        apply_stopwords_deletion=False,\n        apply_parsing_filter=False,\n        apply_lemmatization=False,\n        spacy_language_model=PreprocessingSpacyLanguageModel.FR_CORE_NEWS_MD,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.default_SamplingSettingsModel","title":"<code>default_SamplingSettingsModel()</code>","text":"<p>Create a SamplingSettingsModel instance with default values.</p> <p>Returns:</p> Name Type Description <code>SamplingSettingsModel</code> <code>SamplingSettingsModel</code> <p>A SamplingSettingsModel instance with default values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def default_SamplingSettingsModel() -&gt; SamplingSettingsModel:\n    \"\"\"Create a SamplingSettingsModel instance with default values.\n\n    Returns:\n        SamplingSettingsModel: A SamplingSettingsModel instance with default values.\n    \"\"\"\n    return SamplingSettingsModel(\n        algorithm=SamplingAlgorithm.CLOSEST_IN_DIFFERENT_CLUSTERS,\n        random_seed=42,\n        nb_to_select=25,\n        init_kargs=None,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/settings/#cognitivefactory.interactive_clustering_gui.models.settings.default_VectorizationSettingsModel","title":"<code>default_VectorizationSettingsModel()</code>","text":"<p>Create a VectorizationSettingsModel instance with default values.</p> <p>Returns:</p> Name Type Description <code>VectorizationSettingsModel</code> <code>VectorizationSettingsModel</code> <p>A VectorizationSettingsModel instance with default values.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\settings.py</code> <pre><code>def default_VectorizationSettingsModel() -&gt; VectorizationSettingsModel:\n    \"\"\"Create a VectorizationSettingsModel instance with default values.\n\n    Returns:\n        VectorizationSettingsModel: A VectorizationSettingsModel instance with default values.\n    \"\"\"\n    return VectorizationSettingsModel(\n        vectorizer_type=VectorizerType.TFIDF,\n        spacy_language_model=None,\n        random_seed=42,\n    )\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/states/","title":"states","text":"<ul> <li>Name:         cognitivefactory.interactive_clustering_gui.models.states</li> <li>Description:  Definition of models required to define states of interactive clustering.</li> <li>Author:       Erwan Schild</li> <li>Created:      25/04/2022</li> <li>Licence:      CeCILL-C License v1.0 (https://cecill.info/licences.fr.html)</li> </ul>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/states/#cognitivefactory.interactive_clustering_gui.models.states.ICGUIStates","title":"<code>ICGUIStates</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>The enumeration of available States for Interactive Clustering GUI.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\states.py</code> <pre><code>class ICGUIStates(str, enum.Enum):  # noqa: WPS600 (subclassing str)\n    \"\"\"The enumeration of available States for Interactive Clustering GUI.\"\"\"\n\n    ###\n    ### Case of project initialization.\n    ###\n\n    INITIALIZATION_WITHOUT_MODELIZATION: str = \"INITIALIZATION_WITHOUT_MODELIZATION\"\n    INITIALIZATION_WITH_PENDING_MODELIZATION: str = \"INITIALIZATION_WITH_PENDING_MODELIZATION\"\n    INITIALIZATION_WITH_WORKING_MODELIZATION: str = \"INITIALIZATION_WITH_WORKING_MODELIZATION\"\n    INITIALIZATION_WITH_ERRORS: str = \"INITIALIZATION_WITH_ERRORS\"\n\n    ###\n    ### Case of constraints sampling.\n    ###\n\n    # Sampling tasks.\n    SAMPLING_TODO: str = \"SAMPLING_TODO\"\n    SAMPLING_PENDING: str = \"SAMPLING_PENDING\"\n    SAMPLING_WORKING: str = \"SAMPLING_WORKING\"\n    # Import on sampling step.\n    IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION: str = \"IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION\"\n    IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION: str = \"IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION\"\n    IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION: str = \"IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION\"\n    IMPORT_AT_SAMPLING_STEP_WITH_ERRORS: str = \"IMPORT_AT_SAMPLING_STEP_WITH_ERRORS\"\n\n    ###\n    ### Case of constraints annotation.\n    ###\n\n    # Modelization up to date.\n    ANNOTATION_WITH_UPTODATE_MODELIZATION: str = \"ANNOTATION_WITH_UPTODATE_MODELIZATION\"\n    # Modelization outdated, without conflicts.\n    ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS: str = (\n        \"ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS\"\n    )\n    ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS: str = (\n        \"ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS\"\n    )\n    ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS: str = (\n        \"ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS\"\n    )\n    # Modelization outdated, with conflicts.\n    ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS: str = \"ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS\"\n    ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS: str = \"ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS\"\n    ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS: str = \"ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS\"\n    # Import on annotation step.\n    IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION: str = \"IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION\"\n    IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION: str = \"IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION\"\n    IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION: str = \"IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION\"\n    IMPORT_AT_ANNOTATION_STEP_WITH_ERRORS: str = \"IMPORT_AT_ANNOTATION_STEP_WITH_ERRORS\"\n\n    ###\n    ### Case of constrained clustering.\n    ###\n\n    # Clustering tasks.\n    CLUSTERING_TODO: str = \"CLUSTERING_TODO\"\n    CLUSTERING_PENDING: str = \"CLUSTERING_PENDING\"\n    CLUSTERING_WORKING: str = \"CLUSTERING_WORKING\"\n    # Import on clustering step.\n    IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION: str = \"IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION\"\n    IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION: str = \"IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION\"\n    IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION: str = \"IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION\"\n    IMPORT_AT_CLUSTERING_STEP_WITH_ERRORS: str = \"IMPORT_AT_CLUSTERING_STEP_WITH_ERRORS\"\n\n    ###\n    ### Case of iteration end.\n    ###\n\n    # End of iteration.\n    ITERATION_END: str = \"ITERATION_END\"\n    # Import on iteration end.\n    IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION: str = \"IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION\"\n    IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION: str = \"IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION\"\n    IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION: str = \"IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION\"\n    IMPORT_AT_ITERATION_END_WITH_ERRORS: str = \"IMPORT_AT_ITERATION_END_WITH_ERRORS\"\n\n    @classmethod\n    def contains(cls, state: str) -&gt; bool:\n        \"\"\"Test if state is in this enumeration.\n\n        Args:\n            state (str): A state.\n\n        Returns:\n            bool: `True` if the state is in the enumeration.\n        \"\"\"\n        return state in cls._value2member_map_\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/states/#cognitivefactory.interactive_clustering_gui.models.states.ICGUIStates.contains","title":"<code>contains(state)</code>  <code>classmethod</code>","text":"<p>Test if state is in this enumeration.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>str</code> <p>A state.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the state is in the enumeration.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\states.py</code> <pre><code>@classmethod\ndef contains(cls, state: str) -&gt; bool:\n    \"\"\"Test if state is in this enumeration.\n\n    Args:\n        state (str): A state.\n\n    Returns:\n        bool: `True` if the state is in the enumeration.\n    \"\"\"\n    return state in cls._value2member_map_\n</code></pre>"},{"location":"reference/cognitivefactory/interactive_clustering_gui/models/states/#cognitivefactory.interactive_clustering_gui.models.states.get_ICGUIStates_details","title":"<code>get_ICGUIStates_details(state)</code>","text":"<p>Get state details.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>ICGUIStates</code> <p>The state.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The state details.</p> Source code in <code>src\\cognitivefactory\\interactive_clustering_gui\\models\\states.py</code> <pre><code>def get_ICGUIStates_details(\n    state: ICGUIStates,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get state details.\n\n    Args:\n        state (ICGUIStates): The state.\n\n    Returns:\n        Dict[str, Any]: The state details.\n    \"\"\"\n\n    map_of_ICGUIStates_details: Dict[ICGUIStates, Dict[str, Any]] = {\n        ICGUIStates.INITIALIZATION_WITHOUT_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"TODO\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.INITIALIZATION_WITH_PENDING_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.INITIALIZATION_WITH_WORKING_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.INITIALIZATION_WITH_ERRORS: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"ERROR\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ###\n        ### Case of constraints sampling.\n        ###\n        # Sampling tasks.\n        ICGUIStates.SAMPLING_TODO: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.SAMPLING_PENDING: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"PENDING\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.SAMPLING_WORKING: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"WORKING\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        # Import on sampling step.\n        ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITHOUT_MODELIZATION: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"TODO\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_PENDING_MODELIZATION: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_WORKING_MODELIZATION: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_SAMPLING_STEP_WITH_ERRORS: {\n            \"step\": \"SAMPLING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"ERROR\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ###\n        ### Case of constraints annotation.\n        ###\n        # Modelization up to date.\n        ICGUIStates.ANNOTATION_WITH_UPTODATE_MODELIZATION: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        # Modelization outdated, without conflicts.\n        ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITHOUT_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"OUTDATED\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITHOUT_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITHOUT_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"FALSE\",\n        },\n        # Modelization outdated, with conflicts.\n        ICGUIStates.ANNOTATION_WITH_OUTDATED_MODELIZATION_WITH_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"OUTDATED\",\n            \"conflict_status\": \"TRUE\",\n        },\n        ICGUIStates.ANNOTATION_WITH_PENDING_MODELIZATION_WITH_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"TRUE\",\n        },\n        ICGUIStates.ANNOTATION_WITH_WORKING_MODELIZATION_WITH_CONFLICTS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"TRUE\",\n        },\n        # Import on annotation step.\n        ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITHOUT_MODELIZATION: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"TODO\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_PENDING_MODELIZATION: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_WORKING_MODELIZATION: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ANNOTATION_STEP_WITH_ERRORS: {\n            \"step\": \"ANNOTATION\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"ERROR\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ###\n        ### Case of constrained clustering.\n        ###\n        # Clustering tasks.\n        ICGUIStates.CLUSTERING_TODO: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.CLUSTERING_PENDING: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"PENDING\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        ICGUIStates.CLUSTERING_WORKING: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"WORKING\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        # Import on clustering step.\n        ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITHOUT_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"TODO\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_PENDING_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_WORKING_MODELIZATION: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_CLUSTERING_STEP_WITH_ERRORS: {\n            \"step\": \"CLUSTERING\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"ERROR\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ###\n        ### Case of iteration end.\n        ###\n        # End of iteration.\n        ICGUIStates.ITERATION_END: {\n            \"step\": \"ITERATION_END\",\n            \"step_status\": \"TODO\",\n            \"modelization_status\": \"UPTODATE\",\n            \"conflict_status\": \"FALSE\",\n        },\n        # Import on iteration end.\n        ICGUIStates.IMPORT_AT_ITERATION_END_WITHOUT_MODELIZATION: {\n            \"step\": \"ITERATION_END\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"TODO\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ITERATION_END_WITH_PENDING_MODELIZATION: {\n            \"step\": \"ITERATION_END\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"PENDING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ITERATION_END_WITH_WORKING_MODELIZATION: {\n            \"step\": \"ITERATION_END\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"WORKING\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n        ICGUIStates.IMPORT_AT_ITERATION_END_WITH_ERRORS: {\n            \"step\": \"ITERATION_END\",\n            \"step_status\": \"LOCKED\",\n            \"modelization_status\": \"ERROR\",\n            \"conflict_status\": \"UNKNOWN\",\n        },\n    }\n\n    return map_of_ICGUIStates_details[state]\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}